/**
 * Autogenerated by Thrift Compiler (0.9.2)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package cn.edu.tsinghua.tsfile.format;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.nio.ByteBuffer;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Digest/statistics per row group and per page
 * All fields are optional.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-29")
public class Digest implements org.apache.thrift.TBase<Digest, Digest._Fields>, java.io.Serializable, Cloneable, Comparable<Digest> {
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Digest");
    private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("max", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("min", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField NULL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("null_count", org.apache.thrift.protocol.TType.I64, (short) 3);
    private static final org.apache.thrift.protocol.TField DISTINCT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("distinct_count", org.apache.thrift.protocol.TType.I64, (short) 4);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    // isset id assignments
    private static final int __NULL_COUNT_ISSET_ID = 0;
    private static final int __DISTINCT_COUNT_ISSET_ID = 1;
    private static final _Fields optionals[] = {_Fields.MAX, _Fields.MIN, _Fields.NULL_COUNT, _Fields.DISTINCT_COUNT};

    static {
        schemes.put(StandardScheme.class, new DigestStandardSchemeFactory());
        schemes.put(TupleScheme.class, new DigestTupleSchemeFactory());
    }

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("max", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
        tmpMap.put(_Fields.MIN, new org.apache.thrift.meta_data.FieldMetaData("min", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
        tmpMap.put(_Fields.NULL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("null_count", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.DISTINCT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("distinct_count", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Digest.class, metaDataMap);
    }

    /**
     * min and max value of the timeseries, encoded in PLAIN encoding
     */
    public ByteBuffer max; // optional
    public ByteBuffer min; // optional
    /**
     * count of null value in the timeseries
     */
    public long null_count; // optional
    /**
     * count of distinct values occurring
     */
    public long distinct_count; // optional
    private byte __isset_bitfield = 0;

    public Digest() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Digest(Digest other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetMax()) {
            this.max = org.apache.thrift.TBaseHelper.copyBinary(other.max);
        }
        if (other.isSetMin()) {
            this.min = org.apache.thrift.TBaseHelper.copyBinary(other.min);
        }
        this.null_count = other.null_count;
        this.distinct_count = other.distinct_count;
    }

    public Digest deepCopy() {
        return new Digest(this);
    }

    @Override
    public void clear() {
        this.max = null;
        this.min = null;
        setNull_countIsSet(false);
        this.null_count = 0;
        setDistinct_countIsSet(false);
        this.distinct_count = 0;
    }

    /**
     * min and max value of the timeseries, encoded in PLAIN encoding
     */
    public byte[] getMax() {
        setMax(org.apache.thrift.TBaseHelper.rightSize(max));
        return max == null ? null : max.array();
    }

    public Digest setMax(ByteBuffer max) {
        this.max = org.apache.thrift.TBaseHelper.copyBinary(max);
        return this;
    }

    public ByteBuffer bufferForMax() {
        return org.apache.thrift.TBaseHelper.copyBinary(max);
    }

    /**
     * min and max value of the timeseries, encoded in PLAIN encoding
     */
    public Digest setMax(byte[] max) {
        this.max = max == null ? (ByteBuffer) null : ByteBuffer.wrap(Arrays.copyOf(max, max.length));
        return this;
    }

    public void unsetMax() {
        this.max = null;
    }

    /** Returns true if field max is set (has been assigned a value) and false otherwise */
    public boolean isSetMax() {
        return this.max != null;
    }

    public void setMaxIsSet(boolean value) {
        if (!value) {
            this.max = null;
        }
    }

    public byte[] getMin() {
        setMin(org.apache.thrift.TBaseHelper.rightSize(min));
        return min == null ? null : min.array();
    }

    public Digest setMin(ByteBuffer min) {
        this.min = org.apache.thrift.TBaseHelper.copyBinary(min);
        return this;
    }

    public ByteBuffer bufferForMin() {
        return org.apache.thrift.TBaseHelper.copyBinary(min);
    }

    public Digest setMin(byte[] min) {
        this.min = min == null ? (ByteBuffer) null : ByteBuffer.wrap(Arrays.copyOf(min, min.length));
        return this;
    }

    public void unsetMin() {
        this.min = null;
    }

    /** Returns true if field min is set (has been assigned a value) and false otherwise */
    public boolean isSetMin() {
        return this.min != null;
    }

    public void setMinIsSet(boolean value) {
        if (!value) {
            this.min = null;
        }
    }

    /**
     * count of null value in the timeseries
     */
    public long getNull_count() {
        return this.null_count;
    }

    /**
     * count of null value in the timeseries
     */
    public Digest setNull_count(long null_count) {
        this.null_count = null_count;
        setNull_countIsSet(true);
        return this;
    }

    public void unsetNull_count() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NULL_COUNT_ISSET_ID);
    }

    /** Returns true if field null_count is set (has been assigned a value) and false otherwise */
    public boolean isSetNull_count() {
        return EncodingUtils.testBit(__isset_bitfield, __NULL_COUNT_ISSET_ID);
    }

    public void setNull_countIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NULL_COUNT_ISSET_ID, value);
    }

    /**
     * count of distinct values occurring
     */
    public long getDistinct_count() {
        return this.distinct_count;
    }

    /**
     * count of distinct values occurring
     */
    public Digest setDistinct_count(long distinct_count) {
        this.distinct_count = distinct_count;
        setDistinct_countIsSet(true);
        return this;
    }

    public void unsetDistinct_count() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISTINCT_COUNT_ISSET_ID);
    }

    /** Returns true if field distinct_count is set (has been assigned a value) and false otherwise */
    public boolean isSetDistinct_count() {
        return EncodingUtils.testBit(__isset_bitfield, __DISTINCT_COUNT_ISSET_ID);
    }

    public void setDistinct_countIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISTINCT_COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case MAX:
                if (value == null) {
                    unsetMax();
                } else {
                    setMax((ByteBuffer) value);
                }
                break;

            case MIN:
                if (value == null) {
                    unsetMin();
                } else {
                    setMin((ByteBuffer) value);
                }
                break;

            case NULL_COUNT:
                if (value == null) {
                    unsetNull_count();
                } else {
                    setNull_count((Long) value);
                }
                break;

            case DISTINCT_COUNT:
                if (value == null) {
                    unsetDistinct_count();
                } else {
                    setDistinct_count((Long) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case MAX:
                return getMax();

            case MIN:
                return getMin();

            case NULL_COUNT:
                return Long.valueOf(getNull_count());

            case DISTINCT_COUNT:
                return Long.valueOf(getDistinct_count());

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case MAX:
                return isSetMax();
            case MIN:
                return isSetMin();
            case NULL_COUNT:
                return isSetNull_count();
            case DISTINCT_COUNT:
                return isSetDistinct_count();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof Digest)
            return this.equals((Digest) that);
        return false;
    }

    public boolean equals(Digest that) {
        if (that == null)
            return false;

        boolean this_present_max = true && this.isSetMax();
        boolean that_present_max = true && that.isSetMax();
        if (this_present_max || that_present_max) {
            if (!(this_present_max && that_present_max))
                return false;
            if (!this.max.equals(that.max))
                return false;
        }

        boolean this_present_min = true && this.isSetMin();
        boolean that_present_min = true && that.isSetMin();
        if (this_present_min || that_present_min) {
            if (!(this_present_min && that_present_min))
                return false;
            if (!this.min.equals(that.min))
                return false;
        }

        boolean this_present_null_count = true && this.isSetNull_count();
        boolean that_present_null_count = true && that.isSetNull_count();
        if (this_present_null_count || that_present_null_count) {
            if (!(this_present_null_count && that_present_null_count))
                return false;
            if (this.null_count != that.null_count)
                return false;
        }

        boolean this_present_distinct_count = true && this.isSetDistinct_count();
        boolean that_present_distinct_count = true && that.isSetDistinct_count();
        if (this_present_distinct_count || that_present_distinct_count) {
            if (!(this_present_distinct_count && that_present_distinct_count))
                return false;
            if (this.distinct_count != that.distinct_count)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_max = true && (isSetMax());
        list.add(present_max);
        if (present_max)
            list.add(max);

        boolean present_min = true && (isSetMin());
        list.add(present_min);
        if (present_min)
            list.add(min);

        boolean present_null_count = true && (isSetNull_count());
        list.add(present_null_count);
        if (present_null_count)
            list.add(null_count);

        boolean present_distinct_count = true && (isSetDistinct_count());
        list.add(present_distinct_count);
        if (present_distinct_count)
            list.add(distinct_count);

        return list.hashCode();
    }

    @Override
    public int compareTo(Digest other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetMax()).compareTo(other.isSetMax());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMax()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max, other.max);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMin()).compareTo(other.isSetMin());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMin()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min, other.min);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetNull_count()).compareTo(other.isSetNull_count());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetNull_count()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.null_count, other.null_count);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDistinct_count()).compareTo(other.isSetDistinct_count());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDistinct_count()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distinct_count, other.distinct_count);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Digest(");
        boolean first = true;

        if (isSetMax()) {
            sb.append("max:");
            if (this.max == null) {
                sb.append("null");
            } else {
                org.apache.thrift.TBaseHelper.toString(this.max, sb);
            }
            first = false;
        }
        if (isSetMin()) {
            if (!first) sb.append(", ");
            sb.append("min:");
            if (this.min == null) {
                sb.append("null");
            } else {
                org.apache.thrift.TBaseHelper.toString(this.min, sb);
            }
            first = false;
        }
        if (isSetNull_count()) {
            if (!first) sb.append(", ");
            sb.append("null_count:");
            sb.append(this.null_count);
            first = false;
        }
        if (isSetDistinct_count()) {
            if (!first) sb.append(", ");
            sb.append("distinct_count:");
            sb.append(this.distinct_count);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        /**
         * min and max value of the timeseries, encoded in PLAIN encoding
         */
        MAX((short) 1, "max"),
        MIN((short) 2, "min"),
        /**
         * count of null value in the timeseries
         */
        NULL_COUNT((short) 3, "null_count"),
        /**
         * count of distinct values occurring
         */
        DISTINCT_COUNT((short) 4, "distinct_count");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // MAX
                    return MAX;
                case 2: // MIN
                    return MIN;
                case 3: // NULL_COUNT
                    return NULL_COUNT;
                case 4: // DISTINCT_COUNT
                    return DISTINCT_COUNT;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    private static class DigestStandardSchemeFactory implements SchemeFactory {
        public DigestStandardScheme getScheme() {
            return new DigestStandardScheme();
        }
    }

    private static class DigestStandardScheme extends StandardScheme<Digest> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Digest struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // MAX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.max = iprot.readBinary();
                            struct.setMaxIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // MIN
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.min = iprot.readBinary();
                            struct.setMinIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // NULL_COUNT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.null_count = iprot.readI64();
                            struct.setNull_countIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // DISTINCT_COUNT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.distinct_count = iprot.readI64();
                            struct.setDistinct_countIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Digest struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.max != null) {
                if (struct.isSetMax()) {
                    oprot.writeFieldBegin(MAX_FIELD_DESC);
                    oprot.writeBinary(struct.max);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.min != null) {
                if (struct.isSetMin()) {
                    oprot.writeFieldBegin(MIN_FIELD_DESC);
                    oprot.writeBinary(struct.min);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetNull_count()) {
                oprot.writeFieldBegin(NULL_COUNT_FIELD_DESC);
                oprot.writeI64(struct.null_count);
                oprot.writeFieldEnd();
            }
            if (struct.isSetDistinct_count()) {
                oprot.writeFieldBegin(DISTINCT_COUNT_FIELD_DESC);
                oprot.writeI64(struct.distinct_count);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class DigestTupleSchemeFactory implements SchemeFactory {
        public DigestTupleScheme getScheme() {
            return new DigestTupleScheme();
        }
    }

    private static class DigestTupleScheme extends TupleScheme<Digest> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Digest struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetMax()) {
                optionals.set(0);
            }
            if (struct.isSetMin()) {
                optionals.set(1);
            }
            if (struct.isSetNull_count()) {
                optionals.set(2);
            }
            if (struct.isSetDistinct_count()) {
                optionals.set(3);
            }
            oprot.writeBitSet(optionals, 4);
            if (struct.isSetMax()) {
                oprot.writeBinary(struct.max);
            }
            if (struct.isSetMin()) {
                oprot.writeBinary(struct.min);
            }
            if (struct.isSetNull_count()) {
                oprot.writeI64(struct.null_count);
            }
            if (struct.isSetDistinct_count()) {
                oprot.writeI64(struct.distinct_count);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Digest struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(4);
            if (incoming.get(0)) {
                struct.max = iprot.readBinary();
                struct.setMaxIsSet(true);
            }
            if (incoming.get(1)) {
                struct.min = iprot.readBinary();
                struct.setMinIsSet(true);
            }
            if (incoming.get(2)) {
                struct.null_count = iprot.readI64();
                struct.setNull_countIsSet(true);
            }
            if (incoming.get(3)) {
                struct.distinct_count = iprot.readI64();
                struct.setDistinct_countIsSet(true);
            }
        }
    }

}

