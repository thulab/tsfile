/**
 * Autogenerated by Thrift Compiler (0.9.2)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package cn.edu.tsinghua.tsfile.format;


/**
 * Encodings supported by TSFile.  Not all encodings are valid for all types.
 */
public enum Encoding implements org.apache.thrift.TEnum {
    /**
     * Default encoding.
     * BOOLEAN - 1 bit per value. 0 is false; 1 is true.
     * INT32 - 4 bytes per value.  Stored as little-endian.
     * INT64 - 8 bytes per value.  Stored as little-endian.
     * FLOAT - 4 bytes per value.  IEEE. Stored as little-endian.
     * DOUBLE - 8 bytes per value.  IEEE. Stored as little-endian.
     * BYTE_ARRAY - 4 byte length stored as little endian, followed by bytes.
     * FIXED_LEN_BYTE_ARRAY - Just the bytes.
     * ENUMS - 1 byte per value. Stored as little-endian.
     */
    PLAIN(0),
    /**
     * Deprecated: Dictionary encoding. The values in the dictionary are encoded in the
     * plain type.
     * in a data page use RLE_DICTIONARY instead.
     * in a Dictionary page use PLAIN instead
     */
    PLAIN_DICTIONARY(2),
    /**
     * Group packed run length encoding. Usable for Booleans
     * (on one bit: 0 is false; 1 is true.)
     */
    RLE(3),
    /**
     * Delta encoding for integers. This can be used for series of int values and works best
     * on sorted data
     */
    DELTA_BINARY_PACKED(5),
    /**
     * Encoding for byte arrays to separate the length values and the data. The lengths
     * are encoded using DELTA_BINARY_PACKED
     */
    DELTA_LENGTH_BYTE_ARRAY(6),
    /**
     * Incremental-encoded byte array. Prefix lengths are encoded using DELTA_BINARY_PACKED.
     * Suffixes are stored as delta length byte arrays.
     */
    DELTA_BYTE_ARRAY(7),
    /**
     * Dictionary encoding: the ids are encoded using the RLE encoding
     */
    RLE_DICTIONARY(8),
    /**
     * First-order difference encoding. Usable for encoding timestamps
     * in a time series.
     */
    DIFF(9),
    /**
     * Second-order difference encoding. Usable for encoding timestamps
     * in a time series.
     */
    TS_2DIFF(10),
    /**
     * Bitmap encoding. Usable for encoding switch values
     * in a time series.
     */
    BITMAP(11),
    /**
     * Piecewise linear approximate
     */
    PLA(12),
    /**
     * Swing door transform
     */
    SDT(13),
    /**
     * Discrete Fourier transform
     */
    DFT(14);

    private final int value;

    private Encoding(int value) {
        this.value = value;
    }

    /**
     * Find a the enum type by its integer value, as defined in the Thrift IDL.
     * @return null if the value is not found.
     */
    public static Encoding findByValue(int value) {
        switch (value) {
            case 0:
                return PLAIN;
            case 2:
                return PLAIN_DICTIONARY;
            case 3:
                return RLE;
            case 5:
                return DELTA_BINARY_PACKED;
            case 6:
                return DELTA_LENGTH_BYTE_ARRAY;
            case 7:
                return DELTA_BYTE_ARRAY;
            case 8:
                return RLE_DICTIONARY;
            case 9:
                return DIFF;
            case 10:
                return TS_2DIFF;
            case 11:
                return BITMAP;
            case 12:
                return PLA;
            case 13:
                return SDT;
            case 14:
                return DFT;
            default:
                return null;
        }
    }

    /**
     * Get the integer value of this enum value, as defined in the Thrift IDL.
     */
    public int getValue() {
        return value;
    }
}
