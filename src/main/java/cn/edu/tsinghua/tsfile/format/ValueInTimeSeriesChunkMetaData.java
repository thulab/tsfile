/**
 * Autogenerated by Thrift Compiler (0.9.2)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package cn.edu.tsinghua.tsfile.format;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-29")
public class ValueInTimeSeriesChunkMetaData implements org.apache.thrift.TBase<ValueInTimeSeriesChunkMetaData, ValueInTimeSeriesChunkMetaData._Fields>, java.io.Serializable, Cloneable, Comparable<ValueInTimeSeriesChunkMetaData> {
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ValueInTimeSeriesChunkMetaData");
    private static final org.apache.thrift.protocol.TField DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("data_type", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField MAX_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("max_error", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField DIGEST_FIELD_DESC = new org.apache.thrift.protocol.TField("digest", org.apache.thrift.protocol.TType.STRUCT, (short) 3);
    private static final org.apache.thrift.protocol.TField ENUM_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("enum_values", org.apache.thrift.protocol.TType.LIST, (short) 4);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    // isset id assignments
    private static final int __MAX_ERROR_ISSET_ID = 0;
    private static final _Fields optionals[] = {_Fields.MAX_ERROR, _Fields.DIGEST, _Fields.ENUM_VALUES};

    static {
        schemes.put(StandardScheme.class, new ValueInTimeSeriesChunkMetaDataStandardSchemeFactory());
        schemes.put(TupleScheme.class, new ValueInTimeSeriesChunkMetaDataTupleSchemeFactory());
    }

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("data_type", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DataType.class)));
        tmpMap.put(_Fields.MAX_ERROR, new org.apache.thrift.meta_data.FieldMetaData("max_error", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.DIGEST, new org.apache.thrift.meta_data.FieldMetaData("digest", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Digest.class)));
        tmpMap.put(_Fields.ENUM_VALUES, new org.apache.thrift.meta_data.FieldMetaData("enum_values", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ValueInTimeSeriesChunkMetaData.class, metaDataMap);
    }

    /**
     *
     * @see DataType
     */
    public DataType data_type; // required
    public int max_error; // optional
    public Digest digest; // optional
    /**
     * If values of data consist of enum values, metadata will store all possible
     * values in time series
     */
    public List<String> enum_values; // optional
    private byte __isset_bitfield = 0;

    public ValueInTimeSeriesChunkMetaData() {
    }

    public ValueInTimeSeriesChunkMetaData(
            DataType data_type) {
        this();
        this.data_type = data_type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ValueInTimeSeriesChunkMetaData(ValueInTimeSeriesChunkMetaData other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetData_type()) {
            this.data_type = other.data_type;
        }
        this.max_error = other.max_error;
        if (other.isSetDigest()) {
            this.digest = new Digest(other.digest);
        }
        if (other.isSetEnum_values()) {
            List<String> __this__enum_values = new ArrayList<String>(other.enum_values);
            this.enum_values = __this__enum_values;
        }
    }

    public ValueInTimeSeriesChunkMetaData deepCopy() {
        return new ValueInTimeSeriesChunkMetaData(this);
    }

    @Override
    public void clear() {
        this.data_type = null;
        setMax_errorIsSet(false);
        this.max_error = 0;
        this.digest = null;
        this.enum_values = null;
    }

    /**
     *
     * @see DataType
     */
    public DataType getData_type() {
        return this.data_type;
    }

    /**
     *
     * @see DataType
     */
    public ValueInTimeSeriesChunkMetaData setData_type(DataType data_type) {
        this.data_type = data_type;
        return this;
    }

    public void unsetData_type() {
        this.data_type = null;
    }

    /** Returns true if field data_type is set (has been assigned a value) and false otherwise */
    public boolean isSetData_type() {
        return this.data_type != null;
    }

    public void setData_typeIsSet(boolean value) {
        if (!value) {
            this.data_type = null;
        }
    }

    public int getMax_error() {
        return this.max_error;
    }

    public ValueInTimeSeriesChunkMetaData setMax_error(int max_error) {
        this.max_error = max_error;
        setMax_errorIsSet(true);
        return this;
    }

    public void unsetMax_error() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_ERROR_ISSET_ID);
    }

    /** Returns true if field max_error is set (has been assigned a value) and false otherwise */
    public boolean isSetMax_error() {
        return EncodingUtils.testBit(__isset_bitfield, __MAX_ERROR_ISSET_ID);
    }

    public void setMax_errorIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_ERROR_ISSET_ID, value);
    }

    public Digest getDigest() {
        return this.digest;
    }

    public ValueInTimeSeriesChunkMetaData setDigest(Digest digest) {
        this.digest = digest;
        return this;
    }

    public void unsetDigest() {
        this.digest = null;
    }

    /** Returns true if field digest is set (has been assigned a value) and false otherwise */
    public boolean isSetDigest() {
        return this.digest != null;
    }

    public void setDigestIsSet(boolean value) {
        if (!value) {
            this.digest = null;
        }
    }

    public int getEnum_valuesSize() {
        return (this.enum_values == null) ? 0 : this.enum_values.size();
    }

    public java.util.Iterator<String> getEnum_valuesIterator() {
        return (this.enum_values == null) ? null : this.enum_values.iterator();
    }

    public void addToEnum_values(String elem) {
        if (this.enum_values == null) {
            this.enum_values = new ArrayList<String>();
        }
        this.enum_values.add(elem);
    }

    /**
     * If values of data consist of enum values, metadata will store all possible
     * values in time series
     */
    public List<String> getEnum_values() {
        return this.enum_values;
    }

    /**
     * If values of data consist of enum values, metadata will store all possible
     * values in time series
     */
    public ValueInTimeSeriesChunkMetaData setEnum_values(List<String> enum_values) {
        this.enum_values = enum_values;
        return this;
    }

    public void unsetEnum_values() {
        this.enum_values = null;
    }

    /** Returns true if field enum_values is set (has been assigned a value) and false otherwise */
    public boolean isSetEnum_values() {
        return this.enum_values != null;
    }

    public void setEnum_valuesIsSet(boolean value) {
        if (!value) {
            this.enum_values = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case DATA_TYPE:
                if (value == null) {
                    unsetData_type();
                } else {
                    setData_type((DataType) value);
                }
                break;

            case MAX_ERROR:
                if (value == null) {
                    unsetMax_error();
                } else {
                    setMax_error((Integer) value);
                }
                break;

            case DIGEST:
                if (value == null) {
                    unsetDigest();
                } else {
                    setDigest((Digest) value);
                }
                break;

            case ENUM_VALUES:
                if (value == null) {
                    unsetEnum_values();
                } else {
                    setEnum_values((List<String>) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case DATA_TYPE:
                return getData_type();

            case MAX_ERROR:
                return Integer.valueOf(getMax_error());

            case DIGEST:
                return getDigest();

            case ENUM_VALUES:
                return getEnum_values();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case DATA_TYPE:
                return isSetData_type();
            case MAX_ERROR:
                return isSetMax_error();
            case DIGEST:
                return isSetDigest();
            case ENUM_VALUES:
                return isSetEnum_values();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof ValueInTimeSeriesChunkMetaData)
            return this.equals((ValueInTimeSeriesChunkMetaData) that);
        return false;
    }

    public boolean equals(ValueInTimeSeriesChunkMetaData that) {
        if (that == null)
            return false;

        boolean this_present_data_type = true && this.isSetData_type();
        boolean that_present_data_type = true && that.isSetData_type();
        if (this_present_data_type || that_present_data_type) {
            if (!(this_present_data_type && that_present_data_type))
                return false;
            if (!this.data_type.equals(that.data_type))
                return false;
        }

        boolean this_present_max_error = true && this.isSetMax_error();
        boolean that_present_max_error = true && that.isSetMax_error();
        if (this_present_max_error || that_present_max_error) {
            if (!(this_present_max_error && that_present_max_error))
                return false;
            if (this.max_error != that.max_error)
                return false;
        }

        boolean this_present_digest = true && this.isSetDigest();
        boolean that_present_digest = true && that.isSetDigest();
        if (this_present_digest || that_present_digest) {
            if (!(this_present_digest && that_present_digest))
                return false;
            if (!this.digest.equals(that.digest))
                return false;
        }

        boolean this_present_enum_values = true && this.isSetEnum_values();
        boolean that_present_enum_values = true && that.isSetEnum_values();
        if (this_present_enum_values || that_present_enum_values) {
            if (!(this_present_enum_values && that_present_enum_values))
                return false;
            if (!this.enum_values.equals(that.enum_values))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_data_type = true && (isSetData_type());
        list.add(present_data_type);
        if (present_data_type)
            list.add(data_type.getValue());

        boolean present_max_error = true && (isSetMax_error());
        list.add(present_max_error);
        if (present_max_error)
            list.add(max_error);

        boolean present_digest = true && (isSetDigest());
        list.add(present_digest);
        if (present_digest)
            list.add(digest);

        boolean present_enum_values = true && (isSetEnum_values());
        list.add(present_enum_values);
        if (present_enum_values)
            list.add(enum_values);

        return list.hashCode();
    }

    @Override
    public int compareTo(ValueInTimeSeriesChunkMetaData other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetData_type()).compareTo(other.isSetData_type());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetData_type()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_type, other.data_type);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMax_error()).compareTo(other.isSetMax_error());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMax_error()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_error, other.max_error);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDigest()).compareTo(other.isSetDigest());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDigest()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.digest, other.digest);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetEnum_values()).compareTo(other.isSetEnum_values());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEnum_values()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enum_values, other.enum_values);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ValueInTimeSeriesChunkMetaData(");
        boolean first = true;

        sb.append("data_type:");
        if (this.data_type == null) {
            sb.append("null");
        } else {
            sb.append(this.data_type);
        }
        first = false;
        if (isSetMax_error()) {
            if (!first) sb.append(", ");
            sb.append("max_error:");
            sb.append(this.max_error);
            first = false;
        }
        if (isSetDigest()) {
            if (!first) sb.append(", ");
            sb.append("digest:");
            if (this.digest == null) {
                sb.append("null");
            } else {
                sb.append(this.digest);
            }
            first = false;
        }
        if (isSetEnum_values()) {
            if (!first) sb.append(", ");
            sb.append("enum_values:");
            if (this.enum_values == null) {
                sb.append("null");
            } else {
                sb.append(this.enum_values);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (data_type == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'data_type' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
        if (digest != null) {
            digest.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        /**
         *
         * @see DataType
         */
        DATA_TYPE((short) 1, "data_type"),
        MAX_ERROR((short) 2, "max_error"),
        DIGEST((short) 3, "digest"),
        /**
         * If values of data consist of enum values, metadata will store all possible
         * values in time series
         */
        ENUM_VALUES((short) 4, "enum_values");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // DATA_TYPE
                    return DATA_TYPE;
                case 2: // MAX_ERROR
                    return MAX_ERROR;
                case 3: // DIGEST
                    return DIGEST;
                case 4: // ENUM_VALUES
                    return ENUM_VALUES;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    private static class ValueInTimeSeriesChunkMetaDataStandardSchemeFactory implements SchemeFactory {
        public ValueInTimeSeriesChunkMetaDataStandardScheme getScheme() {
            return new ValueInTimeSeriesChunkMetaDataStandardScheme();
        }
    }

    private static class ValueInTimeSeriesChunkMetaDataStandardScheme extends StandardScheme<ValueInTimeSeriesChunkMetaData> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, ValueInTimeSeriesChunkMetaData struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // DATA_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.data_type = DataType.findByValue(iprot.readI32());
                            struct.setData_typeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // MAX_ERROR
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.max_error = iprot.readI32();
                            struct.setMax_errorIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // DIGEST
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.digest = new Digest();
                            struct.digest.read(iprot);
                            struct.setDigestIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // ENUM_VALUES
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                                struct.enum_values = new ArrayList<String>(_list32.size);
                                String _elem33;
                                for (int _i34 = 0; _i34 < _list32.size; ++_i34) {
                                    _elem33 = iprot.readString();
                                    struct.enum_values.add(_elem33);
                                }
                                iprot.readListEnd();
                            }
                            struct.setEnum_valuesIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, ValueInTimeSeriesChunkMetaData struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.data_type != null) {
                oprot.writeFieldBegin(DATA_TYPE_FIELD_DESC);
                oprot.writeI32(struct.data_type.getValue());
                oprot.writeFieldEnd();
            }
            if (struct.isSetMax_error()) {
                oprot.writeFieldBegin(MAX_ERROR_FIELD_DESC);
                oprot.writeI32(struct.max_error);
                oprot.writeFieldEnd();
            }
            if (struct.digest != null) {
                if (struct.isSetDigest()) {
                    oprot.writeFieldBegin(DIGEST_FIELD_DESC);
                    struct.digest.write(oprot);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.enum_values != null) {
                if (struct.isSetEnum_values()) {
                    oprot.writeFieldBegin(ENUM_VALUES_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.enum_values.size()));
                        for (String _iter35 : struct.enum_values) {
                            oprot.writeString(_iter35);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ValueInTimeSeriesChunkMetaDataTupleSchemeFactory implements SchemeFactory {
        public ValueInTimeSeriesChunkMetaDataTupleScheme getScheme() {
            return new ValueInTimeSeriesChunkMetaDataTupleScheme();
        }
    }

    private static class ValueInTimeSeriesChunkMetaDataTupleScheme extends TupleScheme<ValueInTimeSeriesChunkMetaData> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ValueInTimeSeriesChunkMetaData struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeI32(struct.data_type.getValue());
            BitSet optionals = new BitSet();
            if (struct.isSetMax_error()) {
                optionals.set(0);
            }
            if (struct.isSetDigest()) {
                optionals.set(1);
            }
            if (struct.isSetEnum_values()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetMax_error()) {
                oprot.writeI32(struct.max_error);
            }
            if (struct.isSetDigest()) {
                struct.digest.write(oprot);
            }
            if (struct.isSetEnum_values()) {
                {
                    oprot.writeI32(struct.enum_values.size());
                    for (String _iter36 : struct.enum_values) {
                        oprot.writeString(_iter36);
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ValueInTimeSeriesChunkMetaData struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.data_type = DataType.findByValue(iprot.readI32());
            struct.setData_typeIsSet(true);
            BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.max_error = iprot.readI32();
                struct.setMax_errorIsSet(true);
            }
            if (incoming.get(1)) {
                struct.digest = new Digest();
                struct.digest.read(iprot);
                struct.setDigestIsSet(true);
            }
            if (incoming.get(2)) {
                {
                    org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.enum_values = new ArrayList<String>(_list37.size);
                    String _elem38;
                    for (int _i39 = 0; _i39 < _list37.size; ++_i39) {
                        _elem38 = iprot.readString();
                        struct.enum_values.add(_elem38);
                    }
                }
                struct.setEnum_valuesIsSet(true);
            }
        }
    }

}

