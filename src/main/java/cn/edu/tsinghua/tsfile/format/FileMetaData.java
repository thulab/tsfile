/**
 * Autogenerated by Thrift Compiler (0.9.2)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package cn.edu.tsinghua.tsfile.format;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Description for file metadata
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-6-2")
public class FileMetaData implements org.apache.thrift.TBase<FileMetaData, FileMetaData._Fields>, java.io.Serializable, Cloneable, Comparable<FileMetaData> {
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileMetaData");
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField TIMESERIES_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("timeseries_list", org.apache.thrift.protocol.TType.LIST, (short) 2);
    private static final org.apache.thrift.protocol.TField MAX_NUM_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_num_rows", org.apache.thrift.protocol.TType.I64, (short) 3);
    private static final org.apache.thrift.protocol.TField ROW_GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("row_groups", org.apache.thrift.protocol.TType.LIST, (short) 4);
    private static final org.apache.thrift.protocol.TField JSON_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("json_metadata", org.apache.thrift.protocol.TType.LIST, (short) 5);
    private static final org.apache.thrift.protocol.TField CREATED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("created_by", org.apache.thrift.protocol.TType.STRING, (short) 6);
    private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short) 7);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    // isset id assignments
    private static final int __VERSION_ISSET_ID = 0;
    private static final int __MAX_NUM_ROWS_ISSET_ID = 1;
    private static final _Fields optionals[] = {_Fields.JSON_METADATA, _Fields.CREATED_BY, _Fields.PROPERTIES};

    static {
        schemes.put(StandardScheme.class, new FileMetaDataStandardSchemeFactory());
        schemes.put(TupleScheme.class, new FileMetaDataTupleSchemeFactory());
    }

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.TIMESERIES_LIST, new org.apache.thrift.meta_data.FieldMetaData("timeseries_list", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeSeries.class))));
        tmpMap.put(_Fields.MAX_NUM_ROWS, new org.apache.thrift.meta_data.FieldMetaData("max_num_rows", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.ROW_GROUPS, new org.apache.thrift.meta_data.FieldMetaData("row_groups", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RowGroupMetaData.class))));
        tmpMap.put(_Fields.JSON_METADATA, new org.apache.thrift.meta_data.FieldMetaData("json_metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.CREATED_BY, new org.apache.thrift.meta_data.FieldMetaData("created_by", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileMetaData.class, metaDataMap);
    }

    /**
     * Version of this file *
     */
    public int version; // required
    /**
     * TSFile schema for this file.  This schema contains metadata for all the time series.
     * The schema is represented as a list. *
     */
    public List<TimeSeries> timeseries_list; // required
    /**
     * Maximum number of rows in this file *
     */
    public long max_num_rows; // required
    /**
     * Row groups in this file *
     */
    public List<RowGroupMetaData> row_groups; // required
    /**
     * Optional json metadata *
     */
    public List<String> json_metadata; // optional
    /**
     * String for application that wrote this file.  This should be in the format
     * <Application> version <App Version> (build <App Build Hash>).
     * e.g. tsfile version 1.0 (build SHA-1_hash_code)
     *
     */
    public String created_by; // optional
    /**
     * User specified properties *
     */
    public Map<String, String> properties; // optional
    private byte __isset_bitfield = 0;

    public FileMetaData() {
    }

    public FileMetaData(
            int version,
            List<TimeSeries> timeseries_list,
            long max_num_rows,
            List<RowGroupMetaData> row_groups) {
        this();
        this.version = version;
        setVersionIsSet(true);
        this.timeseries_list = timeseries_list;
        this.max_num_rows = max_num_rows;
        setMax_num_rowsIsSet(true);
        this.row_groups = row_groups;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FileMetaData(FileMetaData other) {
        __isset_bitfield = other.__isset_bitfield;
        this.version = other.version;
        if (other.isSetTimeseries_list()) {
            List<TimeSeries> __this__timeseries_list = new ArrayList<TimeSeries>(other.timeseries_list.size());
            for (TimeSeries other_element : other.timeseries_list) {
                __this__timeseries_list.add(new TimeSeries(other_element));
            }
            this.timeseries_list = __this__timeseries_list;
        }
        this.max_num_rows = other.max_num_rows;
        if (other.isSetRow_groups()) {
            List<RowGroupMetaData> __this__row_groups = new ArrayList<RowGroupMetaData>(other.row_groups.size());
            for (RowGroupMetaData other_element : other.row_groups) {
                __this__row_groups.add(new RowGroupMetaData(other_element));
            }
            this.row_groups = __this__row_groups;
        }
        if (other.isSetJson_metadata()) {
            List<String> __this__json_metadata = new ArrayList<String>(other.json_metadata);
            this.json_metadata = __this__json_metadata;
        }
        if (other.isSetCreated_by()) {
            this.created_by = other.created_by;
        }
        if (other.isSetProperties()) {
            Map<String, String> __this__properties = new HashMap<String, String>(other.properties);
            this.properties = __this__properties;
        }
    }

    public FileMetaData deepCopy() {
        return new FileMetaData(this);
    }

    @Override
    public void clear() {
        setVersionIsSet(false);
        this.version = 0;
        this.timeseries_list = null;
        setMax_num_rowsIsSet(false);
        this.max_num_rows = 0;
        this.row_groups = null;
        this.json_metadata = null;
        this.created_by = null;
        this.properties = null;
    }

    /**
     * Version of this file *
     */
    public int getVersion() {
        return this.version;
    }

    /**
     * Version of this file *
     */
    public FileMetaData setVersion(int version) {
        this.version = version;
        setVersionIsSet(true);
        return this;
    }

    public void unsetVersion() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
        return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    public void setVersionIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
    }

    public int getTimeseries_listSize() {
        return (this.timeseries_list == null) ? 0 : this.timeseries_list.size();
    }

    public java.util.Iterator<TimeSeries> getTimeseries_listIterator() {
        return (this.timeseries_list == null) ? null : this.timeseries_list.iterator();
    }

    public void addToTimeseries_list(TimeSeries elem) {
        if (this.timeseries_list == null) {
            this.timeseries_list = new ArrayList<TimeSeries>();
        }
        this.timeseries_list.add(elem);
    }

    /**
     * TSFile schema for this file.  This schema contains metadata for all the time series.
     * The schema is represented as a list. *
     */
    public List<TimeSeries> getTimeseries_list() {
        return this.timeseries_list;
    }

    /**
     * TSFile schema for this file.  This schema contains metadata for all the time series.
     * The schema is represented as a list. *
     */
    public FileMetaData setTimeseries_list(List<TimeSeries> timeseries_list) {
        this.timeseries_list = timeseries_list;
        return this;
    }

    public void unsetTimeseries_list() {
        this.timeseries_list = null;
    }

    /** Returns true if field timeseries_list is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeseries_list() {
        return this.timeseries_list != null;
    }

    public void setTimeseries_listIsSet(boolean value) {
        if (!value) {
            this.timeseries_list = null;
        }
    }

    /**
     * Maximum number of rows in this file *
     */
    public long getMax_num_rows() {
        return this.max_num_rows;
    }

    /**
     * Maximum number of rows in this file *
     */
    public FileMetaData setMax_num_rows(long max_num_rows) {
        this.max_num_rows = max_num_rows;
        setMax_num_rowsIsSet(true);
        return this;
    }

    public void unsetMax_num_rows() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_NUM_ROWS_ISSET_ID);
    }

    /** Returns true if field max_num_rows is set (has been assigned a value) and false otherwise */
    public boolean isSetMax_num_rows() {
        return EncodingUtils.testBit(__isset_bitfield, __MAX_NUM_ROWS_ISSET_ID);
    }

    public void setMax_num_rowsIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_NUM_ROWS_ISSET_ID, value);
    }

    public int getRow_groupsSize() {
        return (this.row_groups == null) ? 0 : this.row_groups.size();
    }

    public java.util.Iterator<RowGroupMetaData> getRow_groupsIterator() {
        return (this.row_groups == null) ? null : this.row_groups.iterator();
    }

    public void addToRow_groups(RowGroupMetaData elem) {
        if (this.row_groups == null) {
            this.row_groups = new ArrayList<RowGroupMetaData>();
        }
        this.row_groups.add(elem);
    }

    /**
     * Row groups in this file *
     */
    public List<RowGroupMetaData> getRow_groups() {
        return this.row_groups;
    }

    /**
     * Row groups in this file *
     */
    public FileMetaData setRow_groups(List<RowGroupMetaData> row_groups) {
        this.row_groups = row_groups;
        return this;
    }

    public void unsetRow_groups() {
        this.row_groups = null;
    }

    /** Returns true if field row_groups is set (has been assigned a value) and false otherwise */
    public boolean isSetRow_groups() {
        return this.row_groups != null;
    }

    public void setRow_groupsIsSet(boolean value) {
        if (!value) {
            this.row_groups = null;
        }
    }

    public int getJson_metadataSize() {
        return (this.json_metadata == null) ? 0 : this.json_metadata.size();
    }

    public java.util.Iterator<String> getJson_metadataIterator() {
        return (this.json_metadata == null) ? null : this.json_metadata.iterator();
    }

    public void addToJson_metadata(String elem) {
        if (this.json_metadata == null) {
            this.json_metadata = new ArrayList<String>();
        }
        this.json_metadata.add(elem);
    }

    /**
     * Optional json metadata *
     */
    public List<String> getJson_metadata() {
        return this.json_metadata;
    }

    /**
     * Optional json metadata *
     */
    public FileMetaData setJson_metadata(List<String> json_metadata) {
        this.json_metadata = json_metadata;
        return this;
    }

    public void unsetJson_metadata() {
        this.json_metadata = null;
    }

    /** Returns true if field json_metadata is set (has been assigned a value) and false otherwise */
    public boolean isSetJson_metadata() {
        return this.json_metadata != null;
    }

    public void setJson_metadataIsSet(boolean value) {
        if (!value) {
            this.json_metadata = null;
        }
    }

    /**
     * String for application that wrote this file.  This should be in the format
     * <Application> version <App Version> (build <App Build Hash>).
     * e.g. tsfile version 1.0 (build SHA-1_hash_code)
     *
     */
    public String getCreated_by() {
        return this.created_by;
    }

    /**
     * String for application that wrote this file.  This should be in the format
     * <Application> version <App Version> (build <App Build Hash>).
     * e.g. tsfile version 1.0 (build SHA-1_hash_code)
     *
     */
    public FileMetaData setCreated_by(String created_by) {
        this.created_by = created_by;
        return this;
    }

    public void unsetCreated_by() {
        this.created_by = null;
    }

    /** Returns true if field created_by is set (has been assigned a value) and false otherwise */
    public boolean isSetCreated_by() {
        return this.created_by != null;
    }

    public void setCreated_byIsSet(boolean value) {
        if (!value) {
            this.created_by = null;
        }
    }

    public int getPropertiesSize() {
        return (this.properties == null) ? 0 : this.properties.size();
    }

    public void putToProperties(String key, String val) {
        if (this.properties == null) {
            this.properties = new HashMap<String, String>();
        }
        this.properties.put(key, val);
    }

    /**
     * User specified properties *
     */
    public Map<String, String> getProperties() {
        return this.properties;
    }

    /**
     * User specified properties *
     */
    public FileMetaData setProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    public void unsetProperties() {
        this.properties = null;
    }

    /** Returns true if field properties is set (has been assigned a value) and false otherwise */
    public boolean isSetProperties() {
        return this.properties != null;
    }

    public void setPropertiesIsSet(boolean value) {
        if (!value) {
            this.properties = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case VERSION:
                if (value == null) {
                    unsetVersion();
                } else {
                    setVersion((Integer) value);
                }
                break;

            case TIMESERIES_LIST:
                if (value == null) {
                    unsetTimeseries_list();
                } else {
                    setTimeseries_list((List<TimeSeries>) value);
                }
                break;

            case MAX_NUM_ROWS:
                if (value == null) {
                    unsetMax_num_rows();
                } else {
                    setMax_num_rows((Long) value);
                }
                break;

            case ROW_GROUPS:
                if (value == null) {
                    unsetRow_groups();
                } else {
                    setRow_groups((List<RowGroupMetaData>) value);
                }
                break;

            case JSON_METADATA:
                if (value == null) {
                    unsetJson_metadata();
                } else {
                    setJson_metadata((List<String>) value);
                }
                break;

            case CREATED_BY:
                if (value == null) {
                    unsetCreated_by();
                } else {
                    setCreated_by((String) value);
                }
                break;

            case PROPERTIES:
                if (value == null) {
                    unsetProperties();
                } else {
                    setProperties((Map<String, String>) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case VERSION:
                return Integer.valueOf(getVersion());

            case TIMESERIES_LIST:
                return getTimeseries_list();

            case MAX_NUM_ROWS:
                return Long.valueOf(getMax_num_rows());

            case ROW_GROUPS:
                return getRow_groups();

            case JSON_METADATA:
                return getJson_metadata();

            case CREATED_BY:
                return getCreated_by();

            case PROPERTIES:
                return getProperties();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case VERSION:
                return isSetVersion();
            case TIMESERIES_LIST:
                return isSetTimeseries_list();
            case MAX_NUM_ROWS:
                return isSetMax_num_rows();
            case ROW_GROUPS:
                return isSetRow_groups();
            case JSON_METADATA:
                return isSetJson_metadata();
            case CREATED_BY:
                return isSetCreated_by();
            case PROPERTIES:
                return isSetProperties();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof FileMetaData)
            return this.equals((FileMetaData) that);
        return false;
    }

    public boolean equals(FileMetaData that) {
        if (that == null)
            return false;

        boolean this_present_version = true;
        boolean that_present_version = true;
        if (this_present_version || that_present_version) {
            if (!(this_present_version && that_present_version))
                return false;
            if (this.version != that.version)
                return false;
        }

        boolean this_present_timeseries_list = true && this.isSetTimeseries_list();
        boolean that_present_timeseries_list = true && that.isSetTimeseries_list();
        if (this_present_timeseries_list || that_present_timeseries_list) {
            if (!(this_present_timeseries_list && that_present_timeseries_list))
                return false;
            if (!this.timeseries_list.equals(that.timeseries_list))
                return false;
        }

        boolean this_present_max_num_rows = true;
        boolean that_present_max_num_rows = true;
        if (this_present_max_num_rows || that_present_max_num_rows) {
            if (!(this_present_max_num_rows && that_present_max_num_rows))
                return false;
            if (this.max_num_rows != that.max_num_rows)
                return false;
        }

        boolean this_present_row_groups = true && this.isSetRow_groups();
        boolean that_present_row_groups = true && that.isSetRow_groups();
        if (this_present_row_groups || that_present_row_groups) {
            if (!(this_present_row_groups && that_present_row_groups))
                return false;
            if (!this.row_groups.equals(that.row_groups))
                return false;
        }

        boolean this_present_json_metadata = true && this.isSetJson_metadata();
        boolean that_present_json_metadata = true && that.isSetJson_metadata();
        if (this_present_json_metadata || that_present_json_metadata) {
            if (!(this_present_json_metadata && that_present_json_metadata))
                return false;
            if (!this.json_metadata.equals(that.json_metadata))
                return false;
        }

        boolean this_present_created_by = true && this.isSetCreated_by();
        boolean that_present_created_by = true && that.isSetCreated_by();
        if (this_present_created_by || that_present_created_by) {
            if (!(this_present_created_by && that_present_created_by))
                return false;
            if (!this.created_by.equals(that.created_by))
                return false;
        }

        boolean this_present_properties = true && this.isSetProperties();
        boolean that_present_properties = true && that.isSetProperties();
        if (this_present_properties || that_present_properties) {
            if (!(this_present_properties && that_present_properties))
                return false;
            if (!this.properties.equals(that.properties))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_version = true;
        list.add(present_version);
        if (present_version)
            list.add(version);

        boolean present_timeseries_list = true && (isSetTimeseries_list());
        list.add(present_timeseries_list);
        if (present_timeseries_list)
            list.add(timeseries_list);

        boolean present_max_num_rows = true;
        list.add(present_max_num_rows);
        if (present_max_num_rows)
            list.add(max_num_rows);

        boolean present_row_groups = true && (isSetRow_groups());
        list.add(present_row_groups);
        if (present_row_groups)
            list.add(row_groups);

        boolean present_json_metadata = true && (isSetJson_metadata());
        list.add(present_json_metadata);
        if (present_json_metadata)
            list.add(json_metadata);

        boolean present_created_by = true && (isSetCreated_by());
        list.add(present_created_by);
        if (present_created_by)
            list.add(created_by);

        boolean present_properties = true && (isSetProperties());
        list.add(present_properties);
        if (present_properties)
            list.add(properties);

        return list.hashCode();
    }

    @Override
    public int compareTo(FileMetaData other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetVersion()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTimeseries_list()).compareTo(other.isSetTimeseries_list());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTimeseries_list()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeseries_list, other.timeseries_list);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMax_num_rows()).compareTo(other.isSetMax_num_rows());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMax_num_rows()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_num_rows, other.max_num_rows);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetRow_groups()).compareTo(other.isSetRow_groups());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRow_groups()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_groups, other.row_groups);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetJson_metadata()).compareTo(other.isSetJson_metadata());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetJson_metadata()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json_metadata, other.json_metadata);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCreated_by()).compareTo(other.isSetCreated_by());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCreated_by()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.created_by, other.created_by);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetProperties()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("FileMetaData(");
        boolean first = true;

        sb.append("version:");
        sb.append(this.version);
        first = false;
        if (!first) sb.append(", ");
        sb.append("timeseries_list:");
        if (this.timeseries_list == null) {
            sb.append("null");
        } else {
            sb.append(this.timeseries_list);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("max_num_rows:");
        sb.append(this.max_num_rows);
        first = false;
        if (!first) sb.append(", ");
        sb.append("row_groups:");
        if (this.row_groups == null) {
            sb.append("null");
        } else {
            sb.append(this.row_groups);
        }
        first = false;
        if (isSetJson_metadata()) {
            if (!first) sb.append(", ");
            sb.append("json_metadata:");
            if (this.json_metadata == null) {
                sb.append("null");
            } else {
                sb.append(this.json_metadata);
            }
            first = false;
        }
        if (isSetCreated_by()) {
            if (!first) sb.append(", ");
            sb.append("created_by:");
            if (this.created_by == null) {
                sb.append("null");
            } else {
                sb.append(this.created_by);
            }
            first = false;
        }
        if (isSetProperties()) {
            if (!first) sb.append(", ");
            sb.append("properties:");
            if (this.properties == null) {
                sb.append("null");
            } else {
                sb.append(this.properties);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // alas, we cannot check 'version' because it's a primitive and you chose the non-beans generator.
        if (timeseries_list == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeseries_list' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'max_num_rows' because it's a primitive and you chose the non-beans generator.
        if (row_groups == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'row_groups' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        /**
         * Version of this file *
         */
        VERSION((short) 1, "version"),
        /**
         * TSFile schema for this file.  This schema contains metadata for all the time series.
         * The schema is represented as a list. *
         */
        TIMESERIES_LIST((short) 2, "timeseries_list"),
        /**
         * Maximum number of rows in this file *
         */
        MAX_NUM_ROWS((short) 3, "max_num_rows"),
        /**
         * Row groups in this file *
         */
        ROW_GROUPS((short) 4, "row_groups"),
        /**
         * Optional json metadata *
         */
        JSON_METADATA((short) 5, "json_metadata"),
        /**
         * String for application that wrote this file.  This should be in the format
         * <Application> version <App Version> (build <App Build Hash>).
         * e.g. tsfile version 1.0 (build SHA-1_hash_code)
         *
         */
        CREATED_BY((short) 6, "created_by"),
        /**
         * User specified properties *
         */
        PROPERTIES((short) 7, "properties");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // VERSION
                    return VERSION;
                case 2: // TIMESERIES_LIST
                    return TIMESERIES_LIST;
                case 3: // MAX_NUM_ROWS
                    return MAX_NUM_ROWS;
                case 4: // ROW_GROUPS
                    return ROW_GROUPS;
                case 5: // JSON_METADATA
                    return JSON_METADATA;
                case 6: // CREATED_BY
                    return CREATED_BY;
                case 7: // PROPERTIES
                    return PROPERTIES;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    private static class FileMetaDataStandardSchemeFactory implements SchemeFactory {
        public FileMetaDataStandardScheme getScheme() {
            return new FileMetaDataStandardScheme();
        }
    }

    private static class FileMetaDataStandardScheme extends StandardScheme<FileMetaData> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, FileMetaData struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // VERSION
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.version = iprot.readI32();
                            struct.setVersionIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // TIMESERIES_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                                struct.timeseries_list = new ArrayList<TimeSeries>(_list64.size);
                                TimeSeries _elem65;
                                for (int _i66 = 0; _i66 < _list64.size; ++_i66) {
                                    _elem65 = new TimeSeries();
                                    _elem65.read(iprot);
                                    struct.timeseries_list.add(_elem65);
                                }
                                iprot.readListEnd();
                            }
                            struct.setTimeseries_listIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // MAX_NUM_ROWS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.max_num_rows = iprot.readI64();
                            struct.setMax_num_rowsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // ROW_GROUPS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list67 = iprot.readListBegin();
                                struct.row_groups = new ArrayList<RowGroupMetaData>(_list67.size);
                                RowGroupMetaData _elem68;
                                for (int _i69 = 0; _i69 < _list67.size; ++_i69) {
                                    _elem68 = new RowGroupMetaData();
                                    _elem68.read(iprot);
                                    struct.row_groups.add(_elem68);
                                }
                                iprot.readListEnd();
                            }
                            struct.setRow_groupsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // JSON_METADATA
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                                struct.json_metadata = new ArrayList<String>(_list70.size);
                                String _elem71;
                                for (int _i72 = 0; _i72 < _list70.size; ++_i72) {
                                    _elem71 = iprot.readString();
                                    struct.json_metadata.add(_elem71);
                                }
                                iprot.readListEnd();
                            }
                            struct.setJson_metadataIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // CREATED_BY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.created_by = iprot.readString();
                            struct.setCreated_byIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // PROPERTIES
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map73 = iprot.readMapBegin();
                                struct.properties = new HashMap<String, String>(2 * _map73.size);
                                String _key74;
                                String _val75;
                                for (int _i76 = 0; _i76 < _map73.size; ++_i76) {
                                    _key74 = iprot.readString();
                                    _val75 = iprot.readString();
                                    struct.properties.put(_key74, _val75);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setPropertiesIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetVersion()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetMax_num_rows()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_num_rows' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, FileMetaData struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(VERSION_FIELD_DESC);
            oprot.writeI32(struct.version);
            oprot.writeFieldEnd();
            if (struct.timeseries_list != null) {
                oprot.writeFieldBegin(TIMESERIES_LIST_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.timeseries_list.size()));
                    for (TimeSeries _iter77 : struct.timeseries_list) {
                        _iter77.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(MAX_NUM_ROWS_FIELD_DESC);
            oprot.writeI64(struct.max_num_rows);
            oprot.writeFieldEnd();
            if (struct.row_groups != null) {
                oprot.writeFieldBegin(ROW_GROUPS_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.row_groups.size()));
                    for (RowGroupMetaData _iter78 : struct.row_groups) {
                        _iter78.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.json_metadata != null) {
                if (struct.isSetJson_metadata()) {
                    oprot.writeFieldBegin(JSON_METADATA_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.json_metadata.size()));
                        for (String _iter79 : struct.json_metadata) {
                            oprot.writeString(_iter79);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.created_by != null) {
                if (struct.isSetCreated_by()) {
                    oprot.writeFieldBegin(CREATED_BY_FIELD_DESC);
                    oprot.writeString(struct.created_by);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.properties != null) {
                if (struct.isSetProperties()) {
                    oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
                        for (Map.Entry<String, String> _iter80 : struct.properties.entrySet()) {
                            oprot.writeString(_iter80.getKey());
                            oprot.writeString(_iter80.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class FileMetaDataTupleSchemeFactory implements SchemeFactory {
        public FileMetaDataTupleScheme getScheme() {
            return new FileMetaDataTupleScheme();
        }
    }

    private static class FileMetaDataTupleScheme extends TupleScheme<FileMetaData> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, FileMetaData struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeI32(struct.version);
            {
                oprot.writeI32(struct.timeseries_list.size());
                for (TimeSeries _iter81 : struct.timeseries_list) {
                    _iter81.write(oprot);
                }
            }
            oprot.writeI64(struct.max_num_rows);
            {
                oprot.writeI32(struct.row_groups.size());
                for (RowGroupMetaData _iter82 : struct.row_groups) {
                    _iter82.write(oprot);
                }
            }
            BitSet optionals = new BitSet();
            if (struct.isSetJson_metadata()) {
                optionals.set(0);
            }
            if (struct.isSetCreated_by()) {
                optionals.set(1);
            }
            if (struct.isSetProperties()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetJson_metadata()) {
                {
                    oprot.writeI32(struct.json_metadata.size());
                    for (String _iter83 : struct.json_metadata) {
                        oprot.writeString(_iter83);
                    }
                }
            }
            if (struct.isSetCreated_by()) {
                oprot.writeString(struct.created_by);
            }
            if (struct.isSetProperties()) {
                {
                    oprot.writeI32(struct.properties.size());
                    for (Map.Entry<String, String> _iter84 : struct.properties.entrySet()) {
                        oprot.writeString(_iter84.getKey());
                        oprot.writeString(_iter84.getValue());
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, FileMetaData struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.version = iprot.readI32();
            struct.setVersionIsSet(true);
            {
                org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                struct.timeseries_list = new ArrayList<TimeSeries>(_list85.size);
                TimeSeries _elem86;
                for (int _i87 = 0; _i87 < _list85.size; ++_i87) {
                    _elem86 = new TimeSeries();
                    _elem86.read(iprot);
                    struct.timeseries_list.add(_elem86);
                }
            }
            struct.setTimeseries_listIsSet(true);
            struct.max_num_rows = iprot.readI64();
            struct.setMax_num_rowsIsSet(true);
            {
                org.apache.thrift.protocol.TList _list88 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                struct.row_groups = new ArrayList<RowGroupMetaData>(_list88.size);
                RowGroupMetaData _elem89;
                for (int _i90 = 0; _i90 < _list88.size; ++_i90) {
                    _elem89 = new RowGroupMetaData();
                    _elem89.read(iprot);
                    struct.row_groups.add(_elem89);
                }
            }
            struct.setRow_groupsIsSet(true);
            BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                {
                    org.apache.thrift.protocol.TList _list91 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.json_metadata = new ArrayList<String>(_list91.size);
                    String _elem92;
                    for (int _i93 = 0; _i93 < _list91.size; ++_i93) {
                        _elem92 = iprot.readString();
                        struct.json_metadata.add(_elem92);
                    }
                }
                struct.setJson_metadataIsSet(true);
            }
            if (incoming.get(1)) {
                struct.created_by = iprot.readString();
                struct.setCreated_byIsSet(true);
            }
            if (incoming.get(2)) {
                {
                    org.apache.thrift.protocol.TMap _map94 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.properties = new HashMap<String, String>(2 * _map94.size);
                    String _key95;
                    String _val96;
                    for (int _i97 = 0; _i97 < _map94.size; ++_i97) {
                        _key95 = iprot.readString();
                        _val96 = iprot.readString();
                        struct.properties.put(_key95, _val96);
                    }
                }
                struct.setPropertiesIsSet(true);
            }
        }
    }

}

