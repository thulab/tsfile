/**
 * Autogenerated by Thrift Compiler (0.9.2)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package cn.edu.tsinghua.tsfile.format;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Description for time series chunk metadata
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-29")
public class TimeSeriesChunkMetaData implements org.apache.thrift.TBase<TimeSeriesChunkMetaData, TimeSeriesChunkMetaData._Fields>, java.io.Serializable, Cloneable, Comparable<TimeSeriesChunkMetaData> {
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimeSeriesChunkMetaData");
    private static final org.apache.thrift.protocol.TField MEASUREMENT_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("measurement_uid", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ref_field_id", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField TIMESERIES_CHUNK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeseries_chunk_type", org.apache.thrift.protocol.TType.I32, (short) 3);
    private static final org.apache.thrift.protocol.TField ENCODINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("encodings", org.apache.thrift.protocol.TType.LIST, (short) 4);
    private static final org.apache.thrift.protocol.TField FILE_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("file_offset", org.apache.thrift.protocol.TType.I64, (short) 5);
    private static final org.apache.thrift.protocol.TField COMPRESSION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("compression_type", org.apache.thrift.protocol.TType.I32, (short) 6);
    private static final org.apache.thrift.protocol.TField NUM_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_rows", org.apache.thrift.protocol.TType.I64, (short) 7);
    private static final org.apache.thrift.protocol.TField TOTAL_BYTE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("total_byte_size", org.apache.thrift.protocol.TType.I64, (short) 8);
    private static final org.apache.thrift.protocol.TField JSON_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("json_metadata", org.apache.thrift.protocol.TType.LIST, (short) 9);
    private static final org.apache.thrift.protocol.TField DATA_PAGE_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("data_page_offset", org.apache.thrift.protocol.TType.I64, (short) 10);
    private static final org.apache.thrift.protocol.TField INDEX_PAGE_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("index_page_offset", org.apache.thrift.protocol.TType.I64, (short) 11);
    private static final org.apache.thrift.protocol.TField DICTIONARY_PAGE_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("dictionary_page_offset", org.apache.thrift.protocol.TType.I64, (short) 12);
    private static final org.apache.thrift.protocol.TField DIGEST_FIELD_DESC = new org.apache.thrift.protocol.TField("digest", org.apache.thrift.protocol.TType.STRUCT, (short) 13);
    private static final org.apache.thrift.protocol.TField TIME_TSC_FIELD_DESC = new org.apache.thrift.protocol.TField("time_tsc", org.apache.thrift.protocol.TType.STRUCT, (short) 14);
    private static final org.apache.thrift.protocol.TField VALUE_TSC_FIELD_DESC = new org.apache.thrift.protocol.TField("value_tsc", org.apache.thrift.protocol.TType.STRUCT, (short) 15);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    // isset id assignments
    private static final int __REF_FIELD_ID_ISSET_ID = 0;
    private static final int __FILE_OFFSET_ISSET_ID = 1;
    private static final int __NUM_ROWS_ISSET_ID = 2;
    private static final int __TOTAL_BYTE_SIZE_ISSET_ID = 3;
    private static final int __DATA_PAGE_OFFSET_ISSET_ID = 4;
    private static final int __INDEX_PAGE_OFFSET_ISSET_ID = 5;
    private static final int __DICTIONARY_PAGE_OFFSET_ISSET_ID = 6;
    private static final _Fields optionals[] = {_Fields.REF_FIELD_ID, _Fields.ENCODINGS, _Fields.NUM_ROWS, _Fields.TOTAL_BYTE_SIZE, _Fields.JSON_METADATA, _Fields.DATA_PAGE_OFFSET, _Fields.INDEX_PAGE_OFFSET, _Fields.DICTIONARY_PAGE_OFFSET, _Fields.DIGEST, _Fields.TIME_TSC, _Fields.VALUE_TSC};

    static {
        schemes.put(StandardScheme.class, new TimeSeriesChunkMetaDataStandardSchemeFactory());
        schemes.put(TupleScheme.class, new TimeSeriesChunkMetaDataTupleSchemeFactory());
    }

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.MEASUREMENT_UID, new org.apache.thrift.meta_data.FieldMetaData("measurement_uid", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.REF_FIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("ref_field_id", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.TIMESERIES_CHUNK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeseries_chunk_type", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TimeSeriesChunkType.class)));
        tmpMap.put(_Fields.ENCODINGS, new org.apache.thrift.meta_data.FieldMetaData("encodings", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Encoding.class))));
        tmpMap.put(_Fields.FILE_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("file_offset", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.COMPRESSION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("compression_type", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CompressionType.class)));
        tmpMap.put(_Fields.NUM_ROWS, new org.apache.thrift.meta_data.FieldMetaData("num_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.TOTAL_BYTE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("total_byte_size", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.JSON_METADATA, new org.apache.thrift.meta_data.FieldMetaData("json_metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.DATA_PAGE_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("data_page_offset", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.INDEX_PAGE_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("index_page_offset", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.DICTIONARY_PAGE_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("dictionary_page_offset", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.DIGEST, new org.apache.thrift.meta_data.FieldMetaData("digest", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Digest.class)));
        tmpMap.put(_Fields.TIME_TSC, new org.apache.thrift.meta_data.FieldMetaData("time_tsc", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeInTimeSeriesChunkMetaData.class)));
        tmpMap.put(_Fields.VALUE_TSC, new org.apache.thrift.meta_data.FieldMetaData("value_tsc", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ValueInTimeSeriesChunkMetaData.class)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimeSeriesChunkMetaData.class, metaDataMap);
    }

    public String measurement_uid; // required
    /**
     * Referenced field id in the TSFile schema *
     */
    public int ref_field_id; // optional
    /**
     * Type of this time series *
     *
     * @see TimeSeriesChunkType
     */
    public TimeSeriesChunkType timeseries_chunk_type; // required
    /**
     * Set of all encodings used for this time series. The purpose is to validate
     * whether we can decode those pages. *
     */
    public List<Encoding> encodings; // optional
    /**
     * Byte offset in file_path to the RowGroupMetaData *
     */
    public long file_offset; // required
    /**
     *
     * @see CompressionType
     */
    public CompressionType compression_type; // required
    public long num_rows; // optional
    /**
     * total byte size of all uncompressed pages in this time series chunk (including the headers) *
     */
    public long total_byte_size; // optional
    /**
     * Optional json metadata *
     */
    public List<String> json_metadata; // optional
    /**
     * Byte offset from beginning of file to first data page *
     */
    public long data_page_offset; // optional
    /**
     * Byte offset from beginning of file to root index page *
     */
    public long index_page_offset; // optional
    /**
     * Byte offset from the beginning of file to first (only) dictionary page *
     */
    public long dictionary_page_offset; // optional
    /**
     * optional digest/statistics for this timeseries chunk
     */
    public Digest digest; // optional
    public TimeInTimeSeriesChunkMetaData time_tsc; // optional
    public ValueInTimeSeriesChunkMetaData value_tsc; // optional
    private byte __isset_bitfield = 0;

    public TimeSeriesChunkMetaData() {
    }

    public TimeSeriesChunkMetaData(
            String measurement_uid,
            TimeSeriesChunkType timeseries_chunk_type,
            long file_offset,
            CompressionType compression_type) {
        this();
        this.measurement_uid = measurement_uid;
        this.timeseries_chunk_type = timeseries_chunk_type;
        this.file_offset = file_offset;
        setFile_offsetIsSet(true);
        this.compression_type = compression_type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TimeSeriesChunkMetaData(TimeSeriesChunkMetaData other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetMeasurement_uid()) {
            this.measurement_uid = other.measurement_uid;
        }
        this.ref_field_id = other.ref_field_id;
        if (other.isSetTimeseries_chunk_type()) {
            this.timeseries_chunk_type = other.timeseries_chunk_type;
        }
        if (other.isSetEncodings()) {
            List<Encoding> __this__encodings = new ArrayList<Encoding>(other.encodings.size());
            for (Encoding other_element : other.encodings) {
                __this__encodings.add(other_element);
            }
            this.encodings = __this__encodings;
        }
        this.file_offset = other.file_offset;
        if (other.isSetCompression_type()) {
            this.compression_type = other.compression_type;
        }
        this.num_rows = other.num_rows;
        this.total_byte_size = other.total_byte_size;
        if (other.isSetJson_metadata()) {
            List<String> __this__json_metadata = new ArrayList<String>(other.json_metadata);
            this.json_metadata = __this__json_metadata;
        }
        this.data_page_offset = other.data_page_offset;
        this.index_page_offset = other.index_page_offset;
        this.dictionary_page_offset = other.dictionary_page_offset;
        if (other.isSetDigest()) {
            this.digest = new Digest(other.digest);
        }
        if (other.isSetTime_tsc()) {
            this.time_tsc = new TimeInTimeSeriesChunkMetaData(other.time_tsc);
        }
        if (other.isSetValue_tsc()) {
            this.value_tsc = new ValueInTimeSeriesChunkMetaData(other.value_tsc);
        }
    }

    public TimeSeriesChunkMetaData deepCopy() {
        return new TimeSeriesChunkMetaData(this);
    }

    @Override
    public void clear() {
        this.measurement_uid = null;
        setRef_field_idIsSet(false);
        this.ref_field_id = 0;
        this.timeseries_chunk_type = null;
        this.encodings = null;
        setFile_offsetIsSet(false);
        this.file_offset = 0;
        this.compression_type = null;
        setNum_rowsIsSet(false);
        this.num_rows = 0;
        setTotal_byte_sizeIsSet(false);
        this.total_byte_size = 0;
        this.json_metadata = null;
        setData_page_offsetIsSet(false);
        this.data_page_offset = 0;
        setIndex_page_offsetIsSet(false);
        this.index_page_offset = 0;
        setDictionary_page_offsetIsSet(false);
        this.dictionary_page_offset = 0;
        this.digest = null;
        this.time_tsc = null;
        this.value_tsc = null;
    }

    public String getMeasurement_uid() {
        return this.measurement_uid;
    }

    public TimeSeriesChunkMetaData setMeasurement_uid(String measurement_uid) {
        this.measurement_uid = measurement_uid;
        return this;
    }

    public void unsetMeasurement_uid() {
        this.measurement_uid = null;
    }

    /** Returns true if field measurement_uid is set (has been assigned a value) and false otherwise */
    public boolean isSetMeasurement_uid() {
        return this.measurement_uid != null;
    }

    public void setMeasurement_uidIsSet(boolean value) {
        if (!value) {
            this.measurement_uid = null;
        }
    }

    /**
     * Referenced field id in the TSFile schema *
     */
    public int getRef_field_id() {
        return this.ref_field_id;
    }

    /**
     * Referenced field id in the TSFile schema *
     */
    public TimeSeriesChunkMetaData setRef_field_id(int ref_field_id) {
        this.ref_field_id = ref_field_id;
        setRef_field_idIsSet(true);
        return this;
    }

    public void unsetRef_field_id() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REF_FIELD_ID_ISSET_ID);
    }

    /** Returns true if field ref_field_id is set (has been assigned a value) and false otherwise */
    public boolean isSetRef_field_id() {
        return EncodingUtils.testBit(__isset_bitfield, __REF_FIELD_ID_ISSET_ID);
    }

    public void setRef_field_idIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REF_FIELD_ID_ISSET_ID, value);
    }

    /**
     * Type of this time series *
     *
     * @see TimeSeriesChunkType
     */
    public TimeSeriesChunkType getTimeseries_chunk_type() {
        return this.timeseries_chunk_type;
    }

    /**
     * Type of this time series *
     *
     * @see TimeSeriesChunkType
     */
    public TimeSeriesChunkMetaData setTimeseries_chunk_type(TimeSeriesChunkType timeseries_chunk_type) {
        this.timeseries_chunk_type = timeseries_chunk_type;
        return this;
    }

    public void unsetTimeseries_chunk_type() {
        this.timeseries_chunk_type = null;
    }

    /** Returns true if field timeseries_chunk_type is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeseries_chunk_type() {
        return this.timeseries_chunk_type != null;
    }

    public void setTimeseries_chunk_typeIsSet(boolean value) {
        if (!value) {
            this.timeseries_chunk_type = null;
        }
    }

    public int getEncodingsSize() {
        return (this.encodings == null) ? 0 : this.encodings.size();
    }

    public java.util.Iterator<Encoding> getEncodingsIterator() {
        return (this.encodings == null) ? null : this.encodings.iterator();
    }

    public void addToEncodings(Encoding elem) {
        if (this.encodings == null) {
            this.encodings = new ArrayList<Encoding>();
        }
        this.encodings.add(elem);
    }

    /**
     * Set of all encodings used for this time series. The purpose is to validate
     * whether we can decode those pages. *
     */
    public List<Encoding> getEncodings() {
        return this.encodings;
    }

    /**
     * Set of all encodings used for this time series. The purpose is to validate
     * whether we can decode those pages. *
     */
    public TimeSeriesChunkMetaData setEncodings(List<Encoding> encodings) {
        this.encodings = encodings;
        return this;
    }

    public void unsetEncodings() {
        this.encodings = null;
    }

    /** Returns true if field encodings is set (has been assigned a value) and false otherwise */
    public boolean isSetEncodings() {
        return this.encodings != null;
    }

    public void setEncodingsIsSet(boolean value) {
        if (!value) {
            this.encodings = null;
        }
    }

    /**
     * Byte offset in file_path to the RowGroupMetaData *
     */
    public long getFile_offset() {
        return this.file_offset;
    }

    /**
     * Byte offset in file_path to the RowGroupMetaData *
     */
    public TimeSeriesChunkMetaData setFile_offset(long file_offset) {
        this.file_offset = file_offset;
        setFile_offsetIsSet(true);
        return this;
    }

    public void unsetFile_offset() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILE_OFFSET_ISSET_ID);
    }

    /** Returns true if field file_offset is set (has been assigned a value) and false otherwise */
    public boolean isSetFile_offset() {
        return EncodingUtils.testBit(__isset_bitfield, __FILE_OFFSET_ISSET_ID);
    }

    public void setFile_offsetIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILE_OFFSET_ISSET_ID, value);
    }

    /**
     *
     * @see CompressionType
     */
    public CompressionType getCompression_type() {
        return this.compression_type;
    }

    /**
     *
     * @see CompressionType
     */
    public TimeSeriesChunkMetaData setCompression_type(CompressionType compression_type) {
        this.compression_type = compression_type;
        return this;
    }

    public void unsetCompression_type() {
        this.compression_type = null;
    }

    /** Returns true if field compression_type is set (has been assigned a value) and false otherwise */
    public boolean isSetCompression_type() {
        return this.compression_type != null;
    }

    public void setCompression_typeIsSet(boolean value) {
        if (!value) {
            this.compression_type = null;
        }
    }

    public long getNum_rows() {
        return this.num_rows;
    }

    public TimeSeriesChunkMetaData setNum_rows(long num_rows) {
        this.num_rows = num_rows;
        setNum_rowsIsSet(true);
        return this;
    }

    public void unsetNum_rows() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ROWS_ISSET_ID);
    }

    /** Returns true if field num_rows is set (has been assigned a value) and false otherwise */
    public boolean isSetNum_rows() {
        return EncodingUtils.testBit(__isset_bitfield, __NUM_ROWS_ISSET_ID);
    }

    public void setNum_rowsIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ROWS_ISSET_ID, value);
    }

    /**
     * total byte size of all uncompressed pages in this time series chunk (including the headers) *
     */
    public long getTotal_byte_size() {
        return this.total_byte_size;
    }

    /**
     * total byte size of all uncompressed pages in this time series chunk (including the headers) *
     */
    public TimeSeriesChunkMetaData setTotal_byte_size(long total_byte_size) {
        this.total_byte_size = total_byte_size;
        setTotal_byte_sizeIsSet(true);
        return this;
    }

    public void unsetTotal_byte_size() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_BYTE_SIZE_ISSET_ID);
    }

    /** Returns true if field total_byte_size is set (has been assigned a value) and false otherwise */
    public boolean isSetTotal_byte_size() {
        return EncodingUtils.testBit(__isset_bitfield, __TOTAL_BYTE_SIZE_ISSET_ID);
    }

    public void setTotal_byte_sizeIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_BYTE_SIZE_ISSET_ID, value);
    }

    public int getJson_metadataSize() {
        return (this.json_metadata == null) ? 0 : this.json_metadata.size();
    }

    public java.util.Iterator<String> getJson_metadataIterator() {
        return (this.json_metadata == null) ? null : this.json_metadata.iterator();
    }

    public void addToJson_metadata(String elem) {
        if (this.json_metadata == null) {
            this.json_metadata = new ArrayList<String>();
        }
        this.json_metadata.add(elem);
    }

    /**
     * Optional json metadata *
     */
    public List<String> getJson_metadata() {
        return this.json_metadata;
    }

    /**
     * Optional json metadata *
     */
    public TimeSeriesChunkMetaData setJson_metadata(List<String> json_metadata) {
        this.json_metadata = json_metadata;
        return this;
    }

    public void unsetJson_metadata() {
        this.json_metadata = null;
    }

    /** Returns true if field json_metadata is set (has been assigned a value) and false otherwise */
    public boolean isSetJson_metadata() {
        return this.json_metadata != null;
    }

    public void setJson_metadataIsSet(boolean value) {
        if (!value) {
            this.json_metadata = null;
        }
    }

    /**
     * Byte offset from beginning of file to first data page *
     */
    public long getData_page_offset() {
        return this.data_page_offset;
    }

    /**
     * Byte offset from beginning of file to first data page *
     */
    public TimeSeriesChunkMetaData setData_page_offset(long data_page_offset) {
        this.data_page_offset = data_page_offset;
        setData_page_offsetIsSet(true);
        return this;
    }

    public void unsetData_page_offset() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATA_PAGE_OFFSET_ISSET_ID);
    }

    /** Returns true if field data_page_offset is set (has been assigned a value) and false otherwise */
    public boolean isSetData_page_offset() {
        return EncodingUtils.testBit(__isset_bitfield, __DATA_PAGE_OFFSET_ISSET_ID);
    }

    public void setData_page_offsetIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATA_PAGE_OFFSET_ISSET_ID, value);
    }

    /**
     * Byte offset from beginning of file to root index page *
     */
    public long getIndex_page_offset() {
        return this.index_page_offset;
    }

    /**
     * Byte offset from beginning of file to root index page *
     */
    public TimeSeriesChunkMetaData setIndex_page_offset(long index_page_offset) {
        this.index_page_offset = index_page_offset;
        setIndex_page_offsetIsSet(true);
        return this;
    }

    public void unsetIndex_page_offset() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_PAGE_OFFSET_ISSET_ID);
    }

    /** Returns true if field index_page_offset is set (has been assigned a value) and false otherwise */
    public boolean isSetIndex_page_offset() {
        return EncodingUtils.testBit(__isset_bitfield, __INDEX_PAGE_OFFSET_ISSET_ID);
    }

    public void setIndex_page_offsetIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_PAGE_OFFSET_ISSET_ID, value);
    }

    /**
     * Byte offset from the beginning of file to first (only) dictionary page *
     */
    public long getDictionary_page_offset() {
        return this.dictionary_page_offset;
    }

    /**
     * Byte offset from the beginning of file to first (only) dictionary page *
     */
    public TimeSeriesChunkMetaData setDictionary_page_offset(long dictionary_page_offset) {
        this.dictionary_page_offset = dictionary_page_offset;
        setDictionary_page_offsetIsSet(true);
        return this;
    }

    public void unsetDictionary_page_offset() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DICTIONARY_PAGE_OFFSET_ISSET_ID);
    }

    /** Returns true if field dictionary_page_offset is set (has been assigned a value) and false otherwise */
    public boolean isSetDictionary_page_offset() {
        return EncodingUtils.testBit(__isset_bitfield, __DICTIONARY_PAGE_OFFSET_ISSET_ID);
    }

    public void setDictionary_page_offsetIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DICTIONARY_PAGE_OFFSET_ISSET_ID, value);
    }

    /**
     * optional digest/statistics for this timeseries chunk
     */
    public Digest getDigest() {
        return this.digest;
    }

    /**
     * optional digest/statistics for this timeseries chunk
     */
    public TimeSeriesChunkMetaData setDigest(Digest digest) {
        this.digest = digest;
        return this;
    }

    public void unsetDigest() {
        this.digest = null;
    }

    /** Returns true if field digest is set (has been assigned a value) and false otherwise */
    public boolean isSetDigest() {
        return this.digest != null;
    }

    public void setDigestIsSet(boolean value) {
        if (!value) {
            this.digest = null;
        }
    }

    public TimeInTimeSeriesChunkMetaData getTime_tsc() {
        return this.time_tsc;
    }

    public TimeSeriesChunkMetaData setTime_tsc(TimeInTimeSeriesChunkMetaData time_tsc) {
        this.time_tsc = time_tsc;
        return this;
    }

    public void unsetTime_tsc() {
        this.time_tsc = null;
    }

    /** Returns true if field time_tsc is set (has been assigned a value) and false otherwise */
    public boolean isSetTime_tsc() {
        return this.time_tsc != null;
    }

    public void setTime_tscIsSet(boolean value) {
        if (!value) {
            this.time_tsc = null;
        }
    }

    public ValueInTimeSeriesChunkMetaData getValue_tsc() {
        return this.value_tsc;
    }

    public TimeSeriesChunkMetaData setValue_tsc(ValueInTimeSeriesChunkMetaData value_tsc) {
        this.value_tsc = value_tsc;
        return this;
    }

    public void unsetValue_tsc() {
        this.value_tsc = null;
    }

    /** Returns true if field value_tsc is set (has been assigned a value) and false otherwise */
    public boolean isSetValue_tsc() {
        return this.value_tsc != null;
    }

    public void setValue_tscIsSet(boolean value) {
        if (!value) {
            this.value_tsc = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case MEASUREMENT_UID:
                if (value == null) {
                    unsetMeasurement_uid();
                } else {
                    setMeasurement_uid((String) value);
                }
                break;

            case REF_FIELD_ID:
                if (value == null) {
                    unsetRef_field_id();
                } else {
                    setRef_field_id((Integer) value);
                }
                break;

            case TIMESERIES_CHUNK_TYPE:
                if (value == null) {
                    unsetTimeseries_chunk_type();
                } else {
                    setTimeseries_chunk_type((TimeSeriesChunkType) value);
                }
                break;

            case ENCODINGS:
                if (value == null) {
                    unsetEncodings();
                } else {
                    setEncodings((List<Encoding>) value);
                }
                break;

            case FILE_OFFSET:
                if (value == null) {
                    unsetFile_offset();
                } else {
                    setFile_offset((Long) value);
                }
                break;

            case COMPRESSION_TYPE:
                if (value == null) {
                    unsetCompression_type();
                } else {
                    setCompression_type((CompressionType) value);
                }
                break;

            case NUM_ROWS:
                if (value == null) {
                    unsetNum_rows();
                } else {
                    setNum_rows((Long) value);
                }
                break;

            case TOTAL_BYTE_SIZE:
                if (value == null) {
                    unsetTotal_byte_size();
                } else {
                    setTotal_byte_size((Long) value);
                }
                break;

            case JSON_METADATA:
                if (value == null) {
                    unsetJson_metadata();
                } else {
                    setJson_metadata((List<String>) value);
                }
                break;

            case DATA_PAGE_OFFSET:
                if (value == null) {
                    unsetData_page_offset();
                } else {
                    setData_page_offset((Long) value);
                }
                break;

            case INDEX_PAGE_OFFSET:
                if (value == null) {
                    unsetIndex_page_offset();
                } else {
                    setIndex_page_offset((Long) value);
                }
                break;

            case DICTIONARY_PAGE_OFFSET:
                if (value == null) {
                    unsetDictionary_page_offset();
                } else {
                    setDictionary_page_offset((Long) value);
                }
                break;

            case DIGEST:
                if (value == null) {
                    unsetDigest();
                } else {
                    setDigest((Digest) value);
                }
                break;

            case TIME_TSC:
                if (value == null) {
                    unsetTime_tsc();
                } else {
                    setTime_tsc((TimeInTimeSeriesChunkMetaData) value);
                }
                break;

            case VALUE_TSC:
                if (value == null) {
                    unsetValue_tsc();
                } else {
                    setValue_tsc((ValueInTimeSeriesChunkMetaData) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case MEASUREMENT_UID:
                return getMeasurement_uid();

            case REF_FIELD_ID:
                return Integer.valueOf(getRef_field_id());

            case TIMESERIES_CHUNK_TYPE:
                return getTimeseries_chunk_type();

            case ENCODINGS:
                return getEncodings();

            case FILE_OFFSET:
                return Long.valueOf(getFile_offset());

            case COMPRESSION_TYPE:
                return getCompression_type();

            case NUM_ROWS:
                return Long.valueOf(getNum_rows());

            case TOTAL_BYTE_SIZE:
                return Long.valueOf(getTotal_byte_size());

            case JSON_METADATA:
                return getJson_metadata();

            case DATA_PAGE_OFFSET:
                return Long.valueOf(getData_page_offset());

            case INDEX_PAGE_OFFSET:
                return Long.valueOf(getIndex_page_offset());

            case DICTIONARY_PAGE_OFFSET:
                return Long.valueOf(getDictionary_page_offset());

            case DIGEST:
                return getDigest();

            case TIME_TSC:
                return getTime_tsc();

            case VALUE_TSC:
                return getValue_tsc();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case MEASUREMENT_UID:
                return isSetMeasurement_uid();
            case REF_FIELD_ID:
                return isSetRef_field_id();
            case TIMESERIES_CHUNK_TYPE:
                return isSetTimeseries_chunk_type();
            case ENCODINGS:
                return isSetEncodings();
            case FILE_OFFSET:
                return isSetFile_offset();
            case COMPRESSION_TYPE:
                return isSetCompression_type();
            case NUM_ROWS:
                return isSetNum_rows();
            case TOTAL_BYTE_SIZE:
                return isSetTotal_byte_size();
            case JSON_METADATA:
                return isSetJson_metadata();
            case DATA_PAGE_OFFSET:
                return isSetData_page_offset();
            case INDEX_PAGE_OFFSET:
                return isSetIndex_page_offset();
            case DICTIONARY_PAGE_OFFSET:
                return isSetDictionary_page_offset();
            case DIGEST:
                return isSetDigest();
            case TIME_TSC:
                return isSetTime_tsc();
            case VALUE_TSC:
                return isSetValue_tsc();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof TimeSeriesChunkMetaData)
            return this.equals((TimeSeriesChunkMetaData) that);
        return false;
    }

    public boolean equals(TimeSeriesChunkMetaData that) {
        if (that == null)
            return false;

        boolean this_present_measurement_uid = true && this.isSetMeasurement_uid();
        boolean that_present_measurement_uid = true && that.isSetMeasurement_uid();
        if (this_present_measurement_uid || that_present_measurement_uid) {
            if (!(this_present_measurement_uid && that_present_measurement_uid))
                return false;
            if (!this.measurement_uid.equals(that.measurement_uid))
                return false;
        }

        boolean this_present_ref_field_id = true && this.isSetRef_field_id();
        boolean that_present_ref_field_id = true && that.isSetRef_field_id();
        if (this_present_ref_field_id || that_present_ref_field_id) {
            if (!(this_present_ref_field_id && that_present_ref_field_id))
                return false;
            if (this.ref_field_id != that.ref_field_id)
                return false;
        }

        boolean this_present_timeseries_chunk_type = true && this.isSetTimeseries_chunk_type();
        boolean that_present_timeseries_chunk_type = true && that.isSetTimeseries_chunk_type();
        if (this_present_timeseries_chunk_type || that_present_timeseries_chunk_type) {
            if (!(this_present_timeseries_chunk_type && that_present_timeseries_chunk_type))
                return false;
            if (!this.timeseries_chunk_type.equals(that.timeseries_chunk_type))
                return false;
        }

        boolean this_present_encodings = true && this.isSetEncodings();
        boolean that_present_encodings = true && that.isSetEncodings();
        if (this_present_encodings || that_present_encodings) {
            if (!(this_present_encodings && that_present_encodings))
                return false;
            if (!this.encodings.equals(that.encodings))
                return false;
        }

        boolean this_present_file_offset = true;
        boolean that_present_file_offset = true;
        if (this_present_file_offset || that_present_file_offset) {
            if (!(this_present_file_offset && that_present_file_offset))
                return false;
            if (this.file_offset != that.file_offset)
                return false;
        }

        boolean this_present_compression_type = true && this.isSetCompression_type();
        boolean that_present_compression_type = true && that.isSetCompression_type();
        if (this_present_compression_type || that_present_compression_type) {
            if (!(this_present_compression_type && that_present_compression_type))
                return false;
            if (!this.compression_type.equals(that.compression_type))
                return false;
        }

        boolean this_present_num_rows = true && this.isSetNum_rows();
        boolean that_present_num_rows = true && that.isSetNum_rows();
        if (this_present_num_rows || that_present_num_rows) {
            if (!(this_present_num_rows && that_present_num_rows))
                return false;
            if (this.num_rows != that.num_rows)
                return false;
        }

        boolean this_present_total_byte_size = true && this.isSetTotal_byte_size();
        boolean that_present_total_byte_size = true && that.isSetTotal_byte_size();
        if (this_present_total_byte_size || that_present_total_byte_size) {
            if (!(this_present_total_byte_size && that_present_total_byte_size))
                return false;
            if (this.total_byte_size != that.total_byte_size)
                return false;
        }

        boolean this_present_json_metadata = true && this.isSetJson_metadata();
        boolean that_present_json_metadata = true && that.isSetJson_metadata();
        if (this_present_json_metadata || that_present_json_metadata) {
            if (!(this_present_json_metadata && that_present_json_metadata))
                return false;
            if (!this.json_metadata.equals(that.json_metadata))
                return false;
        }

        boolean this_present_data_page_offset = true && this.isSetData_page_offset();
        boolean that_present_data_page_offset = true && that.isSetData_page_offset();
        if (this_present_data_page_offset || that_present_data_page_offset) {
            if (!(this_present_data_page_offset && that_present_data_page_offset))
                return false;
            if (this.data_page_offset != that.data_page_offset)
                return false;
        }

        boolean this_present_index_page_offset = true && this.isSetIndex_page_offset();
        boolean that_present_index_page_offset = true && that.isSetIndex_page_offset();
        if (this_present_index_page_offset || that_present_index_page_offset) {
            if (!(this_present_index_page_offset && that_present_index_page_offset))
                return false;
            if (this.index_page_offset != that.index_page_offset)
                return false;
        }

        boolean this_present_dictionary_page_offset = true && this.isSetDictionary_page_offset();
        boolean that_present_dictionary_page_offset = true && that.isSetDictionary_page_offset();
        if (this_present_dictionary_page_offset || that_present_dictionary_page_offset) {
            if (!(this_present_dictionary_page_offset && that_present_dictionary_page_offset))
                return false;
            if (this.dictionary_page_offset != that.dictionary_page_offset)
                return false;
        }

        boolean this_present_digest = true && this.isSetDigest();
        boolean that_present_digest = true && that.isSetDigest();
        if (this_present_digest || that_present_digest) {
            if (!(this_present_digest && that_present_digest))
                return false;
            if (!this.digest.equals(that.digest))
                return false;
        }

        boolean this_present_time_tsc = true && this.isSetTime_tsc();
        boolean that_present_time_tsc = true && that.isSetTime_tsc();
        if (this_present_time_tsc || that_present_time_tsc) {
            if (!(this_present_time_tsc && that_present_time_tsc))
                return false;
            if (!this.time_tsc.equals(that.time_tsc))
                return false;
        }

        boolean this_present_value_tsc = true && this.isSetValue_tsc();
        boolean that_present_value_tsc = true && that.isSetValue_tsc();
        if (this_present_value_tsc || that_present_value_tsc) {
            if (!(this_present_value_tsc && that_present_value_tsc))
                return false;
            if (!this.value_tsc.equals(that.value_tsc))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_measurement_uid = true && (isSetMeasurement_uid());
        list.add(present_measurement_uid);
        if (present_measurement_uid)
            list.add(measurement_uid);

        boolean present_ref_field_id = true && (isSetRef_field_id());
        list.add(present_ref_field_id);
        if (present_ref_field_id)
            list.add(ref_field_id);

        boolean present_timeseries_chunk_type = true && (isSetTimeseries_chunk_type());
        list.add(present_timeseries_chunk_type);
        if (present_timeseries_chunk_type)
            list.add(timeseries_chunk_type.getValue());

        boolean present_encodings = true && (isSetEncodings());
        list.add(present_encodings);
        if (present_encodings)
            list.add(encodings);

        boolean present_file_offset = true;
        list.add(present_file_offset);
        if (present_file_offset)
            list.add(file_offset);

        boolean present_compression_type = true && (isSetCompression_type());
        list.add(present_compression_type);
        if (present_compression_type)
            list.add(compression_type.getValue());

        boolean present_num_rows = true && (isSetNum_rows());
        list.add(present_num_rows);
        if (present_num_rows)
            list.add(num_rows);

        boolean present_total_byte_size = true && (isSetTotal_byte_size());
        list.add(present_total_byte_size);
        if (present_total_byte_size)
            list.add(total_byte_size);

        boolean present_json_metadata = true && (isSetJson_metadata());
        list.add(present_json_metadata);
        if (present_json_metadata)
            list.add(json_metadata);

        boolean present_data_page_offset = true && (isSetData_page_offset());
        list.add(present_data_page_offset);
        if (present_data_page_offset)
            list.add(data_page_offset);

        boolean present_index_page_offset = true && (isSetIndex_page_offset());
        list.add(present_index_page_offset);
        if (present_index_page_offset)
            list.add(index_page_offset);

        boolean present_dictionary_page_offset = true && (isSetDictionary_page_offset());
        list.add(present_dictionary_page_offset);
        if (present_dictionary_page_offset)
            list.add(dictionary_page_offset);

        boolean present_digest = true && (isSetDigest());
        list.add(present_digest);
        if (present_digest)
            list.add(digest);

        boolean present_time_tsc = true && (isSetTime_tsc());
        list.add(present_time_tsc);
        if (present_time_tsc)
            list.add(time_tsc);

        boolean present_value_tsc = true && (isSetValue_tsc());
        list.add(present_value_tsc);
        if (present_value_tsc)
            list.add(value_tsc);

        return list.hashCode();
    }

    @Override
    public int compareTo(TimeSeriesChunkMetaData other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetMeasurement_uid()).compareTo(other.isSetMeasurement_uid());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMeasurement_uid()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measurement_uid, other.measurement_uid);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetRef_field_id()).compareTo(other.isSetRef_field_id());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRef_field_id()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref_field_id, other.ref_field_id);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTimeseries_chunk_type()).compareTo(other.isSetTimeseries_chunk_type());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTimeseries_chunk_type()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeseries_chunk_type, other.timeseries_chunk_type);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetEncodings()).compareTo(other.isSetEncodings());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEncodings()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encodings, other.encodings);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetFile_offset()).compareTo(other.isSetFile_offset());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFile_offset()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_offset, other.file_offset);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCompression_type()).compareTo(other.isSetCompression_type());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCompression_type()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compression_type, other.compression_type);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetNum_rows()).compareTo(other.isSetNum_rows());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetNum_rows()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_rows, other.num_rows);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTotal_byte_size()).compareTo(other.isSetTotal_byte_size());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTotal_byte_size()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_byte_size, other.total_byte_size);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetJson_metadata()).compareTo(other.isSetJson_metadata());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetJson_metadata()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json_metadata, other.json_metadata);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetData_page_offset()).compareTo(other.isSetData_page_offset());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetData_page_offset()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_page_offset, other.data_page_offset);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetIndex_page_offset()).compareTo(other.isSetIndex_page_offset());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIndex_page_offset()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_page_offset, other.index_page_offset);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDictionary_page_offset()).compareTo(other.isSetDictionary_page_offset());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDictionary_page_offset()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dictionary_page_offset, other.dictionary_page_offset);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDigest()).compareTo(other.isSetDigest());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDigest()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.digest, other.digest);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTime_tsc()).compareTo(other.isSetTime_tsc());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTime_tsc()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_tsc, other.time_tsc);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetValue_tsc()).compareTo(other.isSetValue_tsc());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetValue_tsc()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value_tsc, other.value_tsc);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("TimeSeriesChunkMetaData(");
        boolean first = true;

        sb.append("measurement_uid:");
        if (this.measurement_uid == null) {
            sb.append("null");
        } else {
            sb.append(this.measurement_uid);
        }
        first = false;
        if (isSetRef_field_id()) {
            if (!first) sb.append(", ");
            sb.append("ref_field_id:");
            sb.append(this.ref_field_id);
            first = false;
        }
        if (!first) sb.append(", ");
        sb.append("timeseries_chunk_type:");
        if (this.timeseries_chunk_type == null) {
            sb.append("null");
        } else {
            sb.append(this.timeseries_chunk_type);
        }
        first = false;
        if (isSetEncodings()) {
            if (!first) sb.append(", ");
            sb.append("encodings:");
            if (this.encodings == null) {
                sb.append("null");
            } else {
                sb.append(this.encodings);
            }
            first = false;
        }
        if (!first) sb.append(", ");
        sb.append("file_offset:");
        sb.append(this.file_offset);
        first = false;
        if (!first) sb.append(", ");
        sb.append("compression_type:");
        if (this.compression_type == null) {
            sb.append("null");
        } else {
            sb.append(this.compression_type);
        }
        first = false;
        if (isSetNum_rows()) {
            if (!first) sb.append(", ");
            sb.append("num_rows:");
            sb.append(this.num_rows);
            first = false;
        }
        if (isSetTotal_byte_size()) {
            if (!first) sb.append(", ");
            sb.append("total_byte_size:");
            sb.append(this.total_byte_size);
            first = false;
        }
        if (isSetJson_metadata()) {
            if (!first) sb.append(", ");
            sb.append("json_metadata:");
            if (this.json_metadata == null) {
                sb.append("null");
            } else {
                sb.append(this.json_metadata);
            }
            first = false;
        }
        if (isSetData_page_offset()) {
            if (!first) sb.append(", ");
            sb.append("data_page_offset:");
            sb.append(this.data_page_offset);
            first = false;
        }
        if (isSetIndex_page_offset()) {
            if (!first) sb.append(", ");
            sb.append("index_page_offset:");
            sb.append(this.index_page_offset);
            first = false;
        }
        if (isSetDictionary_page_offset()) {
            if (!first) sb.append(", ");
            sb.append("dictionary_page_offset:");
            sb.append(this.dictionary_page_offset);
            first = false;
        }
        if (isSetDigest()) {
            if (!first) sb.append(", ");
            sb.append("digest:");
            if (this.digest == null) {
                sb.append("null");
            } else {
                sb.append(this.digest);
            }
            first = false;
        }
        if (isSetTime_tsc()) {
            if (!first) sb.append(", ");
            sb.append("time_tsc:");
            if (this.time_tsc == null) {
                sb.append("null");
            } else {
                sb.append(this.time_tsc);
            }
            first = false;
        }
        if (isSetValue_tsc()) {
            if (!first) sb.append(", ");
            sb.append("value_tsc:");
            if (this.value_tsc == null) {
                sb.append("null");
            } else {
                sb.append(this.value_tsc);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (measurement_uid == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'measurement_uid' was not present! Struct: " + toString());
        }
        if (timeseries_chunk_type == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeseries_chunk_type' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'file_offset' because it's a primitive and you chose the non-beans generator.
        if (compression_type == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'compression_type' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
        if (digest != null) {
            digest.validate();
        }
        if (time_tsc != null) {
            time_tsc.validate();
        }
        if (value_tsc != null) {
            value_tsc.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        MEASUREMENT_UID((short) 1, "measurement_uid"),
        /**
         * Referenced field id in the TSFile schema *
         */
        REF_FIELD_ID((short) 2, "ref_field_id"),
        /**
         * Type of this time series *
         *
         * @see TimeSeriesChunkType
         */
        TIMESERIES_CHUNK_TYPE((short) 3, "timeseries_chunk_type"),
        /**
         * Set of all encodings used for this time series. The purpose is to validate
         * whether we can decode those pages. *
         */
        ENCODINGS((short) 4, "encodings"),
        /**
         * Byte offset in file_path to the RowGroupMetaData *
         */
        FILE_OFFSET((short) 5, "file_offset"),
        /**
         *
         * @see CompressionType
         */
        COMPRESSION_TYPE((short) 6, "compression_type"),
        NUM_ROWS((short) 7, "num_rows"),
        /**
         * total byte size of all uncompressed pages in this time series chunk (including the headers) *
         */
        TOTAL_BYTE_SIZE((short) 8, "total_byte_size"),
        /**
         * Optional json metadata *
         */
        JSON_METADATA((short) 9, "json_metadata"),
        /**
         * Byte offset from beginning of file to first data page *
         */
        DATA_PAGE_OFFSET((short) 10, "data_page_offset"),
        /**
         * Byte offset from beginning of file to root index page *
         */
        INDEX_PAGE_OFFSET((short) 11, "index_page_offset"),
        /**
         * Byte offset from the beginning of file to first (only) dictionary page *
         */
        DICTIONARY_PAGE_OFFSET((short) 12, "dictionary_page_offset"),
        /**
         * optional digest/statistics for this timeseries chunk
         */
        DIGEST((short) 13, "digest"),
        TIME_TSC((short) 14, "time_tsc"),
        VALUE_TSC((short) 15, "value_tsc");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // MEASUREMENT_UID
                    return MEASUREMENT_UID;
                case 2: // REF_FIELD_ID
                    return REF_FIELD_ID;
                case 3: // TIMESERIES_CHUNK_TYPE
                    return TIMESERIES_CHUNK_TYPE;
                case 4: // ENCODINGS
                    return ENCODINGS;
                case 5: // FILE_OFFSET
                    return FILE_OFFSET;
                case 6: // COMPRESSION_TYPE
                    return COMPRESSION_TYPE;
                case 7: // NUM_ROWS
                    return NUM_ROWS;
                case 8: // TOTAL_BYTE_SIZE
                    return TOTAL_BYTE_SIZE;
                case 9: // JSON_METADATA
                    return JSON_METADATA;
                case 10: // DATA_PAGE_OFFSET
                    return DATA_PAGE_OFFSET;
                case 11: // INDEX_PAGE_OFFSET
                    return INDEX_PAGE_OFFSET;
                case 12: // DICTIONARY_PAGE_OFFSET
                    return DICTIONARY_PAGE_OFFSET;
                case 13: // DIGEST
                    return DIGEST;
                case 14: // TIME_TSC
                    return TIME_TSC;
                case 15: // VALUE_TSC
                    return VALUE_TSC;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    private static class TimeSeriesChunkMetaDataStandardSchemeFactory implements SchemeFactory {
        public TimeSeriesChunkMetaDataStandardScheme getScheme() {
            return new TimeSeriesChunkMetaDataStandardScheme();
        }
    }

    private static class TimeSeriesChunkMetaDataStandardScheme extends StandardScheme<TimeSeriesChunkMetaData> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, TimeSeriesChunkMetaData struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // MEASUREMENT_UID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.measurement_uid = iprot.readString();
                            struct.setMeasurement_uidIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // REF_FIELD_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.ref_field_id = iprot.readI32();
                            struct.setRef_field_idIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // TIMESERIES_CHUNK_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.timeseries_chunk_type = TimeSeriesChunkType.findByValue(iprot.readI32());
                            struct.setTimeseries_chunk_typeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // ENCODINGS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                                struct.encodings = new ArrayList<Encoding>(_list40.size);
                                Encoding _elem41;
                                for (int _i42 = 0; _i42 < _list40.size; ++_i42) {
                                    _elem41 = Encoding.findByValue(iprot.readI32());
                                    struct.encodings.add(_elem41);
                                }
                                iprot.readListEnd();
                            }
                            struct.setEncodingsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // FILE_OFFSET
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.file_offset = iprot.readI64();
                            struct.setFile_offsetIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // COMPRESSION_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.compression_type = CompressionType.findByValue(iprot.readI32());
                            struct.setCompression_typeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // NUM_ROWS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.num_rows = iprot.readI64();
                            struct.setNum_rowsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // TOTAL_BYTE_SIZE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.total_byte_size = iprot.readI64();
                            struct.setTotal_byte_sizeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // JSON_METADATA
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                                struct.json_metadata = new ArrayList<String>(_list43.size);
                                String _elem44;
                                for (int _i45 = 0; _i45 < _list43.size; ++_i45) {
                                    _elem44 = iprot.readString();
                                    struct.json_metadata.add(_elem44);
                                }
                                iprot.readListEnd();
                            }
                            struct.setJson_metadataIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10: // DATA_PAGE_OFFSET
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.data_page_offset = iprot.readI64();
                            struct.setData_page_offsetIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 11: // INDEX_PAGE_OFFSET
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.index_page_offset = iprot.readI64();
                            struct.setIndex_page_offsetIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 12: // DICTIONARY_PAGE_OFFSET
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.dictionary_page_offset = iprot.readI64();
                            struct.setDictionary_page_offsetIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 13: // DIGEST
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.digest = new Digest();
                            struct.digest.read(iprot);
                            struct.setDigestIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 14: // TIME_TSC
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.time_tsc = new TimeInTimeSeriesChunkMetaData();
                            struct.time_tsc.read(iprot);
                            struct.setTime_tscIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 15: // VALUE_TSC
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.value_tsc = new ValueInTimeSeriesChunkMetaData();
                            struct.value_tsc.read(iprot);
                            struct.setValue_tscIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetFile_offset()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'file_offset' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, TimeSeriesChunkMetaData struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.measurement_uid != null) {
                oprot.writeFieldBegin(MEASUREMENT_UID_FIELD_DESC);
                oprot.writeString(struct.measurement_uid);
                oprot.writeFieldEnd();
            }
            if (struct.isSetRef_field_id()) {
                oprot.writeFieldBegin(REF_FIELD_ID_FIELD_DESC);
                oprot.writeI32(struct.ref_field_id);
                oprot.writeFieldEnd();
            }
            if (struct.timeseries_chunk_type != null) {
                oprot.writeFieldBegin(TIMESERIES_CHUNK_TYPE_FIELD_DESC);
                oprot.writeI32(struct.timeseries_chunk_type.getValue());
                oprot.writeFieldEnd();
            }
            if (struct.encodings != null) {
                if (struct.isSetEncodings()) {
                    oprot.writeFieldBegin(ENCODINGS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.encodings.size()));
                        for (Encoding _iter46 : struct.encodings) {
                            oprot.writeI32(_iter46.getValue());
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldBegin(FILE_OFFSET_FIELD_DESC);
            oprot.writeI64(struct.file_offset);
            oprot.writeFieldEnd();
            if (struct.compression_type != null) {
                oprot.writeFieldBegin(COMPRESSION_TYPE_FIELD_DESC);
                oprot.writeI32(struct.compression_type.getValue());
                oprot.writeFieldEnd();
            }
            if (struct.isSetNum_rows()) {
                oprot.writeFieldBegin(NUM_ROWS_FIELD_DESC);
                oprot.writeI64(struct.num_rows);
                oprot.writeFieldEnd();
            }
            if (struct.isSetTotal_byte_size()) {
                oprot.writeFieldBegin(TOTAL_BYTE_SIZE_FIELD_DESC);
                oprot.writeI64(struct.total_byte_size);
                oprot.writeFieldEnd();
            }
            if (struct.json_metadata != null) {
                if (struct.isSetJson_metadata()) {
                    oprot.writeFieldBegin(JSON_METADATA_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.json_metadata.size()));
                        for (String _iter47 : struct.json_metadata) {
                            oprot.writeString(_iter47);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetData_page_offset()) {
                oprot.writeFieldBegin(DATA_PAGE_OFFSET_FIELD_DESC);
                oprot.writeI64(struct.data_page_offset);
                oprot.writeFieldEnd();
            }
            if (struct.isSetIndex_page_offset()) {
                oprot.writeFieldBegin(INDEX_PAGE_OFFSET_FIELD_DESC);
                oprot.writeI64(struct.index_page_offset);
                oprot.writeFieldEnd();
            }
            if (struct.isSetDictionary_page_offset()) {
                oprot.writeFieldBegin(DICTIONARY_PAGE_OFFSET_FIELD_DESC);
                oprot.writeI64(struct.dictionary_page_offset);
                oprot.writeFieldEnd();
            }
            if (struct.digest != null) {
                if (struct.isSetDigest()) {
                    oprot.writeFieldBegin(DIGEST_FIELD_DESC);
                    struct.digest.write(oprot);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.time_tsc != null) {
                if (struct.isSetTime_tsc()) {
                    oprot.writeFieldBegin(TIME_TSC_FIELD_DESC);
                    struct.time_tsc.write(oprot);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.value_tsc != null) {
                if (struct.isSetValue_tsc()) {
                    oprot.writeFieldBegin(VALUE_TSC_FIELD_DESC);
                    struct.value_tsc.write(oprot);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class TimeSeriesChunkMetaDataTupleSchemeFactory implements SchemeFactory {
        public TimeSeriesChunkMetaDataTupleScheme getScheme() {
            return new TimeSeriesChunkMetaDataTupleScheme();
        }
    }

    private static class TimeSeriesChunkMetaDataTupleScheme extends TupleScheme<TimeSeriesChunkMetaData> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, TimeSeriesChunkMetaData struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeString(struct.measurement_uid);
            oprot.writeI32(struct.timeseries_chunk_type.getValue());
            oprot.writeI64(struct.file_offset);
            oprot.writeI32(struct.compression_type.getValue());
            BitSet optionals = new BitSet();
            if (struct.isSetRef_field_id()) {
                optionals.set(0);
            }
            if (struct.isSetEncodings()) {
                optionals.set(1);
            }
            if (struct.isSetNum_rows()) {
                optionals.set(2);
            }
            if (struct.isSetTotal_byte_size()) {
                optionals.set(3);
            }
            if (struct.isSetJson_metadata()) {
                optionals.set(4);
            }
            if (struct.isSetData_page_offset()) {
                optionals.set(5);
            }
            if (struct.isSetIndex_page_offset()) {
                optionals.set(6);
            }
            if (struct.isSetDictionary_page_offset()) {
                optionals.set(7);
            }
            if (struct.isSetDigest()) {
                optionals.set(8);
            }
            if (struct.isSetTime_tsc()) {
                optionals.set(9);
            }
            if (struct.isSetValue_tsc()) {
                optionals.set(10);
            }
            oprot.writeBitSet(optionals, 11);
            if (struct.isSetRef_field_id()) {
                oprot.writeI32(struct.ref_field_id);
            }
            if (struct.isSetEncodings()) {
                {
                    oprot.writeI32(struct.encodings.size());
                    for (Encoding _iter48 : struct.encodings) {
                        oprot.writeI32(_iter48.getValue());
                    }
                }
            }
            if (struct.isSetNum_rows()) {
                oprot.writeI64(struct.num_rows);
            }
            if (struct.isSetTotal_byte_size()) {
                oprot.writeI64(struct.total_byte_size);
            }
            if (struct.isSetJson_metadata()) {
                {
                    oprot.writeI32(struct.json_metadata.size());
                    for (String _iter49 : struct.json_metadata) {
                        oprot.writeString(_iter49);
                    }
                }
            }
            if (struct.isSetData_page_offset()) {
                oprot.writeI64(struct.data_page_offset);
            }
            if (struct.isSetIndex_page_offset()) {
                oprot.writeI64(struct.index_page_offset);
            }
            if (struct.isSetDictionary_page_offset()) {
                oprot.writeI64(struct.dictionary_page_offset);
            }
            if (struct.isSetDigest()) {
                struct.digest.write(oprot);
            }
            if (struct.isSetTime_tsc()) {
                struct.time_tsc.write(oprot);
            }
            if (struct.isSetValue_tsc()) {
                struct.value_tsc.write(oprot);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, TimeSeriesChunkMetaData struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.measurement_uid = iprot.readString();
            struct.setMeasurement_uidIsSet(true);
            struct.timeseries_chunk_type = TimeSeriesChunkType.findByValue(iprot.readI32());
            struct.setTimeseries_chunk_typeIsSet(true);
            struct.file_offset = iprot.readI64();
            struct.setFile_offsetIsSet(true);
            struct.compression_type = CompressionType.findByValue(iprot.readI32());
            struct.setCompression_typeIsSet(true);
            BitSet incoming = iprot.readBitSet(11);
            if (incoming.get(0)) {
                struct.ref_field_id = iprot.readI32();
                struct.setRef_field_idIsSet(true);
            }
            if (incoming.get(1)) {
                {
                    org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                    struct.encodings = new ArrayList<Encoding>(_list50.size);
                    Encoding _elem51;
                    for (int _i52 = 0; _i52 < _list50.size; ++_i52) {
                        _elem51 = Encoding.findByValue(iprot.readI32());
                        struct.encodings.add(_elem51);
                    }
                }
                struct.setEncodingsIsSet(true);
            }
            if (incoming.get(2)) {
                struct.num_rows = iprot.readI64();
                struct.setNum_rowsIsSet(true);
            }
            if (incoming.get(3)) {
                struct.total_byte_size = iprot.readI64();
                struct.setTotal_byte_sizeIsSet(true);
            }
            if (incoming.get(4)) {
                {
                    org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.json_metadata = new ArrayList<String>(_list53.size);
                    String _elem54;
                    for (int _i55 = 0; _i55 < _list53.size; ++_i55) {
                        _elem54 = iprot.readString();
                        struct.json_metadata.add(_elem54);
                    }
                }
                struct.setJson_metadataIsSet(true);
            }
            if (incoming.get(5)) {
                struct.data_page_offset = iprot.readI64();
                struct.setData_page_offsetIsSet(true);
            }
            if (incoming.get(6)) {
                struct.index_page_offset = iprot.readI64();
                struct.setIndex_page_offsetIsSet(true);
            }
            if (incoming.get(7)) {
                struct.dictionary_page_offset = iprot.readI64();
                struct.setDictionary_page_offsetIsSet(true);
            }
            if (incoming.get(8)) {
                struct.digest = new Digest();
                struct.digest.read(iprot);
                struct.setDigestIsSet(true);
            }
            if (incoming.get(9)) {
                struct.time_tsc = new TimeInTimeSeriesChunkMetaData();
                struct.time_tsc.read(iprot);
                struct.setTime_tscIsSet(true);
            }
            if (incoming.get(10)) {
                struct.value_tsc = new ValueInTimeSeriesChunkMetaData();
                struct.value_tsc.read(iprot);
                struct.setValue_tscIsSet(true);
            }
        }
    }

}

