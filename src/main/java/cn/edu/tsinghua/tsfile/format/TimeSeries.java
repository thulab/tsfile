/**
 * Autogenerated by Thrift Compiler (0.9.2)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package cn.edu.tsinghua.tsfile.format;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Schema definition of a time-series. Logically, a time-series could be
 * regarded as a list of timestamp-value pairs.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-29")
public class TimeSeries implements org.apache.thrift.TBase<TimeSeries, TimeSeries._Fields>, java.io.Serializable, Cloneable, Comparable<TimeSeries> {
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimeSeries");
    private static final org.apache.thrift.protocol.TField MEASUREMENT_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("measurement_uid", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField TYPE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("type_length", org.apache.thrift.protocol.TType.I32, (short) 3);
    private static final org.apache.thrift.protocol.TField FREQ_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("freq_type", org.apache.thrift.protocol.TType.I32, (short) 4);
    private static final org.apache.thrift.protocol.TField FREQUENCIES_FIELD_DESC = new org.apache.thrift.protocol.TField("frequencies", org.apache.thrift.protocol.TType.LIST, (short) 5);
    private static final org.apache.thrift.protocol.TField CONVERTED_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("converted_type", org.apache.thrift.protocol.TType.I32, (short) 6);
    private static final org.apache.thrift.protocol.TField SCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("scale", org.apache.thrift.protocol.TType.I32, (short) 7);
    private static final org.apache.thrift.protocol.TField PRECISION_FIELD_DESC = new org.apache.thrift.protocol.TField("precision", org.apache.thrift.protocol.TType.I32, (short) 8);
    private static final org.apache.thrift.protocol.TField FIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("field_id", org.apache.thrift.protocol.TType.I32, (short) 9);
    private static final org.apache.thrift.protocol.TField ENUM_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("enum_values", org.apache.thrift.protocol.TType.LIST, (short) 10);
    private static final org.apache.thrift.protocol.TField DELTA_OBJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("delta_object_type", org.apache.thrift.protocol.TType.STRING, (short) 11);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    // isset id assignments
    private static final int __TYPE_LENGTH_ISSET_ID = 0;
    private static final int __SCALE_ISSET_ID = 1;
    private static final int __PRECISION_ISSET_ID = 2;
    private static final int __FIELD_ID_ISSET_ID = 3;
    private static final _Fields optionals[] = {_Fields.TYPE_LENGTH, _Fields.FREQ_TYPE, _Fields.FREQUENCIES, _Fields.CONVERTED_TYPE, _Fields.SCALE, _Fields.PRECISION, _Fields.FIELD_ID, _Fields.ENUM_VALUES};

    static {
        schemes.put(StandardScheme.class, new TimeSeriesStandardSchemeFactory());
        schemes.put(TupleScheme.class, new TimeSeriesTupleSchemeFactory());
    }

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.MEASUREMENT_UID, new org.apache.thrift.meta_data.FieldMetaData("measurement_uid", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DataType.class)));
        tmpMap.put(_Fields.TYPE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("type_length", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.FREQ_TYPE, new org.apache.thrift.meta_data.FieldMetaData("freq_type", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FreqType.class)));
        tmpMap.put(_Fields.FREQUENCIES, new org.apache.thrift.meta_data.FieldMetaData("frequencies", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
        tmpMap.put(_Fields.CONVERTED_TYPE, new org.apache.thrift.meta_data.FieldMetaData("converted_type", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ConvertedType.class)));
        tmpMap.put(_Fields.SCALE, new org.apache.thrift.meta_data.FieldMetaData("scale", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.PRECISION, new org.apache.thrift.meta_data.FieldMetaData("precision", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.FIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("field_id", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.ENUM_VALUES, new org.apache.thrift.meta_data.FieldMetaData("enum_values", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.DELTA_OBJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("delta_object_type", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimeSeries.class, metaDataMap);
    }

    public String measurement_uid; // required
    /**
     * Data type for this time series.
     *
     * @see DataType
     */
    public DataType type; // required
    /**
     * If type is FIXED_LEN_BYTE_ARRAY, this is the byte length of the values.
     * Otherwise, if specified, this is the maximum bit length to store any of the values.
     * (e.g. a low cardinality INT timeseries could have this set to 32).  Note that this is
     * in the schema, and therefore fixed for the entire file.
     */
    public int type_length; // optional
    /**
     * Frequency type of the measurement that generates this time series data.
     * This field is reserved for optimization storage and access.
     * Currently, it is not used.
     *
     * @see FreqType
     */
    public FreqType freq_type; // optional
    /**
     * Frequency values of the measurement that generates this time series data.
     * Note that a measurement may have multiple frequency values.
     */
    public List<Integer> frequencies; // optional
    /**
     * When the schema is the result of a conversion from another model,
     * converted_type is used to record the original type to help with cross conversion.
     *
     * @see ConvertedType
     */
    public ConvertedType converted_type; // optional
    /**
     * Used when this timeseries contains decimal data.
     * See the DECIMAL converted type for more details.
     */
    public int scale; // optional
    public int precision; // optional
    /**
     * When the original schema supports field ids, this will save the
     * original field id in the TSFile schema
     */
    public int field_id; // optional
    /**
     * If values for data consist of enum values, metadata will store all possible
     * values in time series
     */
    public List<String> enum_values; // optional
    public String delta_object_type; // required
    private byte __isset_bitfield = 0;

    public TimeSeries() {
    }

    public TimeSeries(
            String measurement_uid,
            DataType type,
            String delta_object_type) {
        this();
        this.measurement_uid = measurement_uid;
        this.type = type;
        this.delta_object_type = delta_object_type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TimeSeries(TimeSeries other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetMeasurement_uid()) {
            this.measurement_uid = other.measurement_uid;
        }
        if (other.isSetType()) {
            this.type = other.type;
        }
        this.type_length = other.type_length;
        if (other.isSetFreq_type()) {
            this.freq_type = other.freq_type;
        }
        if (other.isSetFrequencies()) {
            List<Integer> __this__frequencies = new ArrayList<Integer>(other.frequencies);
            this.frequencies = __this__frequencies;
        }
        if (other.isSetConverted_type()) {
            this.converted_type = other.converted_type;
        }
        this.scale = other.scale;
        this.precision = other.precision;
        this.field_id = other.field_id;
        if (other.isSetEnum_values()) {
            List<String> __this__enum_values = new ArrayList<String>(other.enum_values);
            this.enum_values = __this__enum_values;
        }
        if (other.isSetDelta_object_type()) {
            this.delta_object_type = other.delta_object_type;
        }
    }

    public TimeSeries deepCopy() {
        return new TimeSeries(this);
    }

    @Override
    public void clear() {
        this.measurement_uid = null;
        this.type = null;
        setType_lengthIsSet(false);
        this.type_length = 0;
        this.freq_type = null;
        this.frequencies = null;
        this.converted_type = null;
        setScaleIsSet(false);
        this.scale = 0;
        setPrecisionIsSet(false);
        this.precision = 0;
        setField_idIsSet(false);
        this.field_id = 0;
        this.enum_values = null;
        this.delta_object_type = null;
    }

    public String getMeasurement_uid() {
        return this.measurement_uid;
    }

    public TimeSeries setMeasurement_uid(String measurement_uid) {
        this.measurement_uid = measurement_uid;
        return this;
    }

    public void unsetMeasurement_uid() {
        this.measurement_uid = null;
    }

    /** Returns true if field measurement_uid is set (has been assigned a value) and false otherwise */
    public boolean isSetMeasurement_uid() {
        return this.measurement_uid != null;
    }

    public void setMeasurement_uidIsSet(boolean value) {
        if (!value) {
            this.measurement_uid = null;
        }
    }

    /**
     * Data type for this time series.
     *
     * @see DataType
     */
    public DataType getType() {
        return this.type;
    }

    /**
     * Data type for this time series.
     *
     * @see DataType
     */
    public TimeSeries setType(DataType type) {
        this.type = type;
        return this;
    }

    public void unsetType() {
        this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
        return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
        if (!value) {
            this.type = null;
        }
    }

    /**
     * If type is FIXED_LEN_BYTE_ARRAY, this is the byte length of the values.
     * Otherwise, if specified, this is the maximum bit length to store any of the values.
     * (e.g. a low cardinality INT timeseries could have this set to 32).  Note that this is
     * in the schema, and therefore fixed for the entire file.
     */
    public int getType_length() {
        return this.type_length;
    }

    /**
     * If type is FIXED_LEN_BYTE_ARRAY, this is the byte length of the values.
     * Otherwise, if specified, this is the maximum bit length to store any of the values.
     * (e.g. a low cardinality INT timeseries could have this set to 32).  Note that this is
     * in the schema, and therefore fixed for the entire file.
     */
    public TimeSeries setType_length(int type_length) {
        this.type_length = type_length;
        setType_lengthIsSet(true);
        return this;
    }

    public void unsetType_length() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_LENGTH_ISSET_ID);
    }

    /** Returns true if field type_length is set (has been assigned a value) and false otherwise */
    public boolean isSetType_length() {
        return EncodingUtils.testBit(__isset_bitfield, __TYPE_LENGTH_ISSET_ID);
    }

    public void setType_lengthIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_LENGTH_ISSET_ID, value);
    }

    /**
     * Frequency type of the measurement that generates this time series data.
     * This field is reserved for optimization storage and access.
     * Currently, it is not used.
     *
     * @see FreqType
     */
    public FreqType getFreq_type() {
        return this.freq_type;
    }

    /**
     * Frequency type of the measurement that generates this time series data.
     * This field is reserved for optimization storage and access.
     * Currently, it is not used.
     *
     * @see FreqType
     */
    public TimeSeries setFreq_type(FreqType freq_type) {
        this.freq_type = freq_type;
        return this;
    }

    public void unsetFreq_type() {
        this.freq_type = null;
    }

    /** Returns true if field freq_type is set (has been assigned a value) and false otherwise */
    public boolean isSetFreq_type() {
        return this.freq_type != null;
    }

    public void setFreq_typeIsSet(boolean value) {
        if (!value) {
            this.freq_type = null;
        }
    }

    public int getFrequenciesSize() {
        return (this.frequencies == null) ? 0 : this.frequencies.size();
    }

    public java.util.Iterator<Integer> getFrequenciesIterator() {
        return (this.frequencies == null) ? null : this.frequencies.iterator();
    }

    public void addToFrequencies(int elem) {
        if (this.frequencies == null) {
            this.frequencies = new ArrayList<Integer>();
        }
        this.frequencies.add(elem);
    }

    /**
     * Frequency values of the measurement that generates this time series data.
     * Note that a measurement may have multiple frequency values.
     */
    public List<Integer> getFrequencies() {
        return this.frequencies;
    }

    /**
     * Frequency values of the measurement that generates this time series data.
     * Note that a measurement may have multiple frequency values.
     */
    public TimeSeries setFrequencies(List<Integer> frequencies) {
        this.frequencies = frequencies;
        return this;
    }

    public void unsetFrequencies() {
        this.frequencies = null;
    }

    /** Returns true if field frequencies is set (has been assigned a value) and false otherwise */
    public boolean isSetFrequencies() {
        return this.frequencies != null;
    }

    public void setFrequenciesIsSet(boolean value) {
        if (!value) {
            this.frequencies = null;
        }
    }

    /**
     * When the schema is the result of a conversion from another model,
     * converted_type is used to record the original type to help with cross conversion.
     *
     * @see ConvertedType
     */
    public ConvertedType getConverted_type() {
        return this.converted_type;
    }

    /**
     * When the schema is the result of a conversion from another model,
     * converted_type is used to record the original type to help with cross conversion.
     *
     * @see ConvertedType
     */
    public TimeSeries setConverted_type(ConvertedType converted_type) {
        this.converted_type = converted_type;
        return this;
    }

    public void unsetConverted_type() {
        this.converted_type = null;
    }

    /** Returns true if field converted_type is set (has been assigned a value) and false otherwise */
    public boolean isSetConverted_type() {
        return this.converted_type != null;
    }

    public void setConverted_typeIsSet(boolean value) {
        if (!value) {
            this.converted_type = null;
        }
    }

    /**
     * Used when this timeseries contains decimal data.
     * See the DECIMAL converted type for more details.
     */
    public int getScale() {
        return this.scale;
    }

    /**
     * Used when this timeseries contains decimal data.
     * See the DECIMAL converted type for more details.
     */
    public TimeSeries setScale(int scale) {
        this.scale = scale;
        setScaleIsSet(true);
        return this;
    }

    public void unsetScale() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCALE_ISSET_ID);
    }

    /** Returns true if field scale is set (has been assigned a value) and false otherwise */
    public boolean isSetScale() {
        return EncodingUtils.testBit(__isset_bitfield, __SCALE_ISSET_ID);
    }

    public void setScaleIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCALE_ISSET_ID, value);
    }

    public int getPrecision() {
        return this.precision;
    }

    public TimeSeries setPrecision(int precision) {
        this.precision = precision;
        setPrecisionIsSet(true);
        return this;
    }

    public void unsetPrecision() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRECISION_ISSET_ID);
    }

    /** Returns true if field precision is set (has been assigned a value) and false otherwise */
    public boolean isSetPrecision() {
        return EncodingUtils.testBit(__isset_bitfield, __PRECISION_ISSET_ID);
    }

    public void setPrecisionIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRECISION_ISSET_ID, value);
    }

    /**
     * When the original schema supports field ids, this will save the
     * original field id in the TSFile schema
     */
    public int getField_id() {
        return this.field_id;
    }

    /**
     * When the original schema supports field ids, this will save the
     * original field id in the TSFile schema
     */
    public TimeSeries setField_id(int field_id) {
        this.field_id = field_id;
        setField_idIsSet(true);
        return this;
    }

    public void unsetField_id() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD_ID_ISSET_ID);
    }

    /** Returns true if field field_id is set (has been assigned a value) and false otherwise */
    public boolean isSetField_id() {
        return EncodingUtils.testBit(__isset_bitfield, __FIELD_ID_ISSET_ID);
    }

    public void setField_idIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD_ID_ISSET_ID, value);
    }

    public int getEnum_valuesSize() {
        return (this.enum_values == null) ? 0 : this.enum_values.size();
    }

    public java.util.Iterator<String> getEnum_valuesIterator() {
        return (this.enum_values == null) ? null : this.enum_values.iterator();
    }

    public void addToEnum_values(String elem) {
        if (this.enum_values == null) {
            this.enum_values = new ArrayList<String>();
        }
        this.enum_values.add(elem);
    }

    /**
     * If values for data consist of enum values, metadata will store all possible
     * values in time series
     */
    public List<String> getEnum_values() {
        return this.enum_values;
    }

    /**
     * If values for data consist of enum values, metadata will store all possible
     * values in time series
     */
    public TimeSeries setEnum_values(List<String> enum_values) {
        this.enum_values = enum_values;
        return this;
    }

    public void unsetEnum_values() {
        this.enum_values = null;
    }

    /** Returns true if field enum_values is set (has been assigned a value) and false otherwise */
    public boolean isSetEnum_values() {
        return this.enum_values != null;
    }

    public void setEnum_valuesIsSet(boolean value) {
        if (!value) {
            this.enum_values = null;
        }
    }

    public String getDelta_object_type() {
        return this.delta_object_type;
    }

    public TimeSeries setDelta_object_type(String delta_object_type) {
        this.delta_object_type = delta_object_type;
        return this;
    }

    public void unsetDelta_object_type() {
        this.delta_object_type = null;
    }

    /** Returns true if field delta_object_type is set (has been assigned a value) and false otherwise */
    public boolean isSetDelta_object_type() {
        return this.delta_object_type != null;
    }

    public void setDelta_object_typeIsSet(boolean value) {
        if (!value) {
            this.delta_object_type = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case MEASUREMENT_UID:
                if (value == null) {
                    unsetMeasurement_uid();
                } else {
                    setMeasurement_uid((String) value);
                }
                break;

            case TYPE:
                if (value == null) {
                    unsetType();
                } else {
                    setType((DataType) value);
                }
                break;

            case TYPE_LENGTH:
                if (value == null) {
                    unsetType_length();
                } else {
                    setType_length((Integer) value);
                }
                break;

            case FREQ_TYPE:
                if (value == null) {
                    unsetFreq_type();
                } else {
                    setFreq_type((FreqType) value);
                }
                break;

            case FREQUENCIES:
                if (value == null) {
                    unsetFrequencies();
                } else {
                    setFrequencies((List<Integer>) value);
                }
                break;

            case CONVERTED_TYPE:
                if (value == null) {
                    unsetConverted_type();
                } else {
                    setConverted_type((ConvertedType) value);
                }
                break;

            case SCALE:
                if (value == null) {
                    unsetScale();
                } else {
                    setScale((Integer) value);
                }
                break;

            case PRECISION:
                if (value == null) {
                    unsetPrecision();
                } else {
                    setPrecision((Integer) value);
                }
                break;

            case FIELD_ID:
                if (value == null) {
                    unsetField_id();
                } else {
                    setField_id((Integer) value);
                }
                break;

            case ENUM_VALUES:
                if (value == null) {
                    unsetEnum_values();
                } else {
                    setEnum_values((List<String>) value);
                }
                break;

            case DELTA_OBJECT_TYPE:
                if (value == null) {
                    unsetDelta_object_type();
                } else {
                    setDelta_object_type((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case MEASUREMENT_UID:
                return getMeasurement_uid();

            case TYPE:
                return getType();

            case TYPE_LENGTH:
                return Integer.valueOf(getType_length());

            case FREQ_TYPE:
                return getFreq_type();

            case FREQUENCIES:
                return getFrequencies();

            case CONVERTED_TYPE:
                return getConverted_type();

            case SCALE:
                return Integer.valueOf(getScale());

            case PRECISION:
                return Integer.valueOf(getPrecision());

            case FIELD_ID:
                return Integer.valueOf(getField_id());

            case ENUM_VALUES:
                return getEnum_values();

            case DELTA_OBJECT_TYPE:
                return getDelta_object_type();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case MEASUREMENT_UID:
                return isSetMeasurement_uid();
            case TYPE:
                return isSetType();
            case TYPE_LENGTH:
                return isSetType_length();
            case FREQ_TYPE:
                return isSetFreq_type();
            case FREQUENCIES:
                return isSetFrequencies();
            case CONVERTED_TYPE:
                return isSetConverted_type();
            case SCALE:
                return isSetScale();
            case PRECISION:
                return isSetPrecision();
            case FIELD_ID:
                return isSetField_id();
            case ENUM_VALUES:
                return isSetEnum_values();
            case DELTA_OBJECT_TYPE:
                return isSetDelta_object_type();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof TimeSeries)
            return this.equals((TimeSeries) that);
        return false;
    }

    public boolean equals(TimeSeries that) {
        if (that == null)
            return false;

        boolean this_present_measurement_uid = true && this.isSetMeasurement_uid();
        boolean that_present_measurement_uid = true && that.isSetMeasurement_uid();
        if (this_present_measurement_uid || that_present_measurement_uid) {
            if (!(this_present_measurement_uid && that_present_measurement_uid))
                return false;
            if (!this.measurement_uid.equals(that.measurement_uid))
                return false;
        }

        boolean this_present_type = true && this.isSetType();
        boolean that_present_type = true && that.isSetType();
        if (this_present_type || that_present_type) {
            if (!(this_present_type && that_present_type))
                return false;
            if (!this.type.equals(that.type))
                return false;
        }

        boolean this_present_type_length = true && this.isSetType_length();
        boolean that_present_type_length = true && that.isSetType_length();
        if (this_present_type_length || that_present_type_length) {
            if (!(this_present_type_length && that_present_type_length))
                return false;
            if (this.type_length != that.type_length)
                return false;
        }

        boolean this_present_freq_type = true && this.isSetFreq_type();
        boolean that_present_freq_type = true && that.isSetFreq_type();
        if (this_present_freq_type || that_present_freq_type) {
            if (!(this_present_freq_type && that_present_freq_type))
                return false;
            if (!this.freq_type.equals(that.freq_type))
                return false;
        }

        boolean this_present_frequencies = true && this.isSetFrequencies();
        boolean that_present_frequencies = true && that.isSetFrequencies();
        if (this_present_frequencies || that_present_frequencies) {
            if (!(this_present_frequencies && that_present_frequencies))
                return false;
            if (!this.frequencies.equals(that.frequencies))
                return false;
        }

        boolean this_present_converted_type = true && this.isSetConverted_type();
        boolean that_present_converted_type = true && that.isSetConverted_type();
        if (this_present_converted_type || that_present_converted_type) {
            if (!(this_present_converted_type && that_present_converted_type))
                return false;
            if (!this.converted_type.equals(that.converted_type))
                return false;
        }

        boolean this_present_scale = true && this.isSetScale();
        boolean that_present_scale = true && that.isSetScale();
        if (this_present_scale || that_present_scale) {
            if (!(this_present_scale && that_present_scale))
                return false;
            if (this.scale != that.scale)
                return false;
        }

        boolean this_present_precision = true && this.isSetPrecision();
        boolean that_present_precision = true && that.isSetPrecision();
        if (this_present_precision || that_present_precision) {
            if (!(this_present_precision && that_present_precision))
                return false;
            if (this.precision != that.precision)
                return false;
        }

        boolean this_present_field_id = true && this.isSetField_id();
        boolean that_present_field_id = true && that.isSetField_id();
        if (this_present_field_id || that_present_field_id) {
            if (!(this_present_field_id && that_present_field_id))
                return false;
            if (this.field_id != that.field_id)
                return false;
        }

        boolean this_present_enum_values = true && this.isSetEnum_values();
        boolean that_present_enum_values = true && that.isSetEnum_values();
        if (this_present_enum_values || that_present_enum_values) {
            if (!(this_present_enum_values && that_present_enum_values))
                return false;
            if (!this.enum_values.equals(that.enum_values))
                return false;
        }

        boolean this_present_delta_object_type = true && this.isSetDelta_object_type();
        boolean that_present_delta_object_type = true && that.isSetDelta_object_type();
        if (this_present_delta_object_type || that_present_delta_object_type) {
            if (!(this_present_delta_object_type && that_present_delta_object_type))
                return false;
            if (!this.delta_object_type.equals(that.delta_object_type))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_measurement_uid = true && (isSetMeasurement_uid());
        list.add(present_measurement_uid);
        if (present_measurement_uid)
            list.add(measurement_uid);

        boolean present_type = true && (isSetType());
        list.add(present_type);
        if (present_type)
            list.add(type.getValue());

        boolean present_type_length = true && (isSetType_length());
        list.add(present_type_length);
        if (present_type_length)
            list.add(type_length);

        boolean present_freq_type = true && (isSetFreq_type());
        list.add(present_freq_type);
        if (present_freq_type)
            list.add(freq_type.getValue());

        boolean present_frequencies = true && (isSetFrequencies());
        list.add(present_frequencies);
        if (present_frequencies)
            list.add(frequencies);

        boolean present_converted_type = true && (isSetConverted_type());
        list.add(present_converted_type);
        if (present_converted_type)
            list.add(converted_type.getValue());

        boolean present_scale = true && (isSetScale());
        list.add(present_scale);
        if (present_scale)
            list.add(scale);

        boolean present_precision = true && (isSetPrecision());
        list.add(present_precision);
        if (present_precision)
            list.add(precision);

        boolean present_field_id = true && (isSetField_id());
        list.add(present_field_id);
        if (present_field_id)
            list.add(field_id);

        boolean present_enum_values = true && (isSetEnum_values());
        list.add(present_enum_values);
        if (present_enum_values)
            list.add(enum_values);

        boolean present_delta_object_type = true && (isSetDelta_object_type());
        list.add(present_delta_object_type);
        if (present_delta_object_type)
            list.add(delta_object_type);

        return list.hashCode();
    }

    @Override
    public int compareTo(TimeSeries other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetMeasurement_uid()).compareTo(other.isSetMeasurement_uid());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMeasurement_uid()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measurement_uid, other.measurement_uid);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetType_length()).compareTo(other.isSetType_length());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetType_length()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_length, other.type_length);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetFreq_type()).compareTo(other.isSetFreq_type());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFreq_type()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freq_type, other.freq_type);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetFrequencies()).compareTo(other.isSetFrequencies());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFrequencies()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frequencies, other.frequencies);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetConverted_type()).compareTo(other.isSetConverted_type());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetConverted_type()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.converted_type, other.converted_type);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetScale()).compareTo(other.isSetScale());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetScale()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scale, other.scale);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPrecision()).compareTo(other.isSetPrecision());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPrecision()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.precision, other.precision);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetField_id()).compareTo(other.isSetField_id());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetField_id()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field_id, other.field_id);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetEnum_values()).compareTo(other.isSetEnum_values());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEnum_values()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enum_values, other.enum_values);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDelta_object_type()).compareTo(other.isSetDelta_object_type());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDelta_object_type()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delta_object_type, other.delta_object_type);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("TimeSeries(");
        boolean first = true;

        sb.append("measurement_uid:");
        if (this.measurement_uid == null) {
            sb.append("null");
        } else {
            sb.append(this.measurement_uid);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("type:");
        if (this.type == null) {
            sb.append("null");
        } else {
            sb.append(this.type);
        }
        first = false;
        if (isSetType_length()) {
            if (!first) sb.append(", ");
            sb.append("type_length:");
            sb.append(this.type_length);
            first = false;
        }
        if (isSetFreq_type()) {
            if (!first) sb.append(", ");
            sb.append("freq_type:");
            if (this.freq_type == null) {
                sb.append("null");
            } else {
                sb.append(this.freq_type);
            }
            first = false;
        }
        if (isSetFrequencies()) {
            if (!first) sb.append(", ");
            sb.append("frequencies:");
            if (this.frequencies == null) {
                sb.append("null");
            } else {
                sb.append(this.frequencies);
            }
            first = false;
        }
        if (isSetConverted_type()) {
            if (!first) sb.append(", ");
            sb.append("converted_type:");
            if (this.converted_type == null) {
                sb.append("null");
            } else {
                sb.append(this.converted_type);
            }
            first = false;
        }
        if (isSetScale()) {
            if (!first) sb.append(", ");
            sb.append("scale:");
            sb.append(this.scale);
            first = false;
        }
        if (isSetPrecision()) {
            if (!first) sb.append(", ");
            sb.append("precision:");
            sb.append(this.precision);
            first = false;
        }
        if (isSetField_id()) {
            if (!first) sb.append(", ");
            sb.append("field_id:");
            sb.append(this.field_id);
            first = false;
        }
        if (isSetEnum_values()) {
            if (!first) sb.append(", ");
            sb.append("enum_values:");
            if (this.enum_values == null) {
                sb.append("null");
            } else {
                sb.append(this.enum_values);
            }
            first = false;
        }
        if (!first) sb.append(", ");
        sb.append("delta_object_type:");
        if (this.delta_object_type == null) {
            sb.append("null");
        } else {
            sb.append(this.delta_object_type);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (measurement_uid == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'measurement_uid' was not present! Struct: " + toString());
        }
        if (type == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
        }
        if (delta_object_type == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'delta_object_type' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        MEASUREMENT_UID((short) 1, "measurement_uid"),
        /**
         * Data type for this time series.
         *
         * @see DataType
         */
        TYPE((short) 2, "type"),
        /**
         * If type is FIXED_LEN_BYTE_ARRAY, this is the byte length of the values.
         * Otherwise, if specified, this is the maximum bit length to store any of the values.
         * (e.g. a low cardinality INT timeseries could have this set to 32).  Note that this is
         * in the schema, and therefore fixed for the entire file.
         */
        TYPE_LENGTH((short) 3, "type_length"),
        /**
         * Frequency type of the measurement that generates this time series data.
         * This field is reserved for optimization storage and access.
         * Currently, it is not used.
         *
         * @see FreqType
         */
        FREQ_TYPE((short) 4, "freq_type"),
        /**
         * Frequency values of the measurement that generates this time series data.
         * Note that a measurement may have multiple frequency values.
         */
        FREQUENCIES((short) 5, "frequencies"),
        /**
         * When the schema is the result of a conversion from another model,
         * converted_type is used to record the original type to help with cross conversion.
         *
         * @see ConvertedType
         */
        CONVERTED_TYPE((short) 6, "converted_type"),
        /**
         * Used when this timeseries contains decimal data.
         * See the DECIMAL converted type for more details.
         */
        SCALE((short) 7, "scale"),
        PRECISION((short) 8, "precision"),
        /**
         * When the original schema supports field ids, this will save the
         * original field id in the TSFile schema
         */
        FIELD_ID((short) 9, "field_id"),
        /**
         * If values for data consist of enum values, metadata will store all possible
         * values in time series
         */
        ENUM_VALUES((short) 10, "enum_values"),
        DELTA_OBJECT_TYPE((short) 11, "delta_object_type");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // MEASUREMENT_UID
                    return MEASUREMENT_UID;
                case 2: // TYPE
                    return TYPE;
                case 3: // TYPE_LENGTH
                    return TYPE_LENGTH;
                case 4: // FREQ_TYPE
                    return FREQ_TYPE;
                case 5: // FREQUENCIES
                    return FREQUENCIES;
                case 6: // CONVERTED_TYPE
                    return CONVERTED_TYPE;
                case 7: // SCALE
                    return SCALE;
                case 8: // PRECISION
                    return PRECISION;
                case 9: // FIELD_ID
                    return FIELD_ID;
                case 10: // ENUM_VALUES
                    return ENUM_VALUES;
                case 11: // DELTA_OBJECT_TYPE
                    return DELTA_OBJECT_TYPE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    private static class TimeSeriesStandardSchemeFactory implements SchemeFactory {
        public TimeSeriesStandardScheme getScheme() {
            return new TimeSeriesStandardScheme();
        }
    }

    private static class TimeSeriesStandardScheme extends StandardScheme<TimeSeries> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, TimeSeries struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // MEASUREMENT_UID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.measurement_uid = iprot.readString();
                            struct.setMeasurement_uidIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.type = DataType.findByValue(iprot.readI32());
                            struct.setTypeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // TYPE_LENGTH
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.type_length = iprot.readI32();
                            struct.setType_lengthIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // FREQ_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.freq_type = FreqType.findByValue(iprot.readI32());
                            struct.setFreq_typeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // FREQUENCIES
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                struct.frequencies = new ArrayList<Integer>(_list0.size);
                                int _elem1;
                                for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                    _elem1 = iprot.readI32();
                                    struct.frequencies.add(_elem1);
                                }
                                iprot.readListEnd();
                            }
                            struct.setFrequenciesIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // CONVERTED_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.converted_type = ConvertedType.findByValue(iprot.readI32());
                            struct.setConverted_typeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // SCALE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.scale = iprot.readI32();
                            struct.setScaleIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // PRECISION
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.precision = iprot.readI32();
                            struct.setPrecisionIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // FIELD_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.field_id = iprot.readI32();
                            struct.setField_idIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10: // ENUM_VALUES
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                                struct.enum_values = new ArrayList<String>(_list3.size);
                                String _elem4;
                                for (int _i5 = 0; _i5 < _list3.size; ++_i5) {
                                    _elem4 = iprot.readString();
                                    struct.enum_values.add(_elem4);
                                }
                                iprot.readListEnd();
                            }
                            struct.setEnum_valuesIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 11: // DELTA_OBJECT_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.delta_object_type = iprot.readString();
                            struct.setDelta_object_typeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, TimeSeries struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.measurement_uid != null) {
                oprot.writeFieldBegin(MEASUREMENT_UID_FIELD_DESC);
                oprot.writeString(struct.measurement_uid);
                oprot.writeFieldEnd();
            }
            if (struct.type != null) {
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type.getValue());
                oprot.writeFieldEnd();
            }
            if (struct.isSetType_length()) {
                oprot.writeFieldBegin(TYPE_LENGTH_FIELD_DESC);
                oprot.writeI32(struct.type_length);
                oprot.writeFieldEnd();
            }
            if (struct.freq_type != null) {
                if (struct.isSetFreq_type()) {
                    oprot.writeFieldBegin(FREQ_TYPE_FIELD_DESC);
                    oprot.writeI32(struct.freq_type.getValue());
                    oprot.writeFieldEnd();
                }
            }
            if (struct.frequencies != null) {
                if (struct.isSetFrequencies()) {
                    oprot.writeFieldBegin(FREQUENCIES_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.frequencies.size()));
                        for (int _iter6 : struct.frequencies) {
                            oprot.writeI32(_iter6);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.converted_type != null) {
                if (struct.isSetConverted_type()) {
                    oprot.writeFieldBegin(CONVERTED_TYPE_FIELD_DESC);
                    oprot.writeI32(struct.converted_type.getValue());
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetScale()) {
                oprot.writeFieldBegin(SCALE_FIELD_DESC);
                oprot.writeI32(struct.scale);
                oprot.writeFieldEnd();
            }
            if (struct.isSetPrecision()) {
                oprot.writeFieldBegin(PRECISION_FIELD_DESC);
                oprot.writeI32(struct.precision);
                oprot.writeFieldEnd();
            }
            if (struct.isSetField_id()) {
                oprot.writeFieldBegin(FIELD_ID_FIELD_DESC);
                oprot.writeI32(struct.field_id);
                oprot.writeFieldEnd();
            }
            if (struct.enum_values != null) {
                if (struct.isSetEnum_values()) {
                    oprot.writeFieldBegin(ENUM_VALUES_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.enum_values.size()));
                        for (String _iter7 : struct.enum_values) {
                            oprot.writeString(_iter7);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.delta_object_type != null) {
                oprot.writeFieldBegin(DELTA_OBJECT_TYPE_FIELD_DESC);
                oprot.writeString(struct.delta_object_type);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class TimeSeriesTupleSchemeFactory implements SchemeFactory {
        public TimeSeriesTupleScheme getScheme() {
            return new TimeSeriesTupleScheme();
        }
    }

    private static class TimeSeriesTupleScheme extends TupleScheme<TimeSeries> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, TimeSeries struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeString(struct.measurement_uid);
            oprot.writeI32(struct.type.getValue());
            oprot.writeString(struct.delta_object_type);
            BitSet optionals = new BitSet();
            if (struct.isSetType_length()) {
                optionals.set(0);
            }
            if (struct.isSetFreq_type()) {
                optionals.set(1);
            }
            if (struct.isSetFrequencies()) {
                optionals.set(2);
            }
            if (struct.isSetConverted_type()) {
                optionals.set(3);
            }
            if (struct.isSetScale()) {
                optionals.set(4);
            }
            if (struct.isSetPrecision()) {
                optionals.set(5);
            }
            if (struct.isSetField_id()) {
                optionals.set(6);
            }
            if (struct.isSetEnum_values()) {
                optionals.set(7);
            }
            oprot.writeBitSet(optionals, 8);
            if (struct.isSetType_length()) {
                oprot.writeI32(struct.type_length);
            }
            if (struct.isSetFreq_type()) {
                oprot.writeI32(struct.freq_type.getValue());
            }
            if (struct.isSetFrequencies()) {
                {
                    oprot.writeI32(struct.frequencies.size());
                    for (int _iter8 : struct.frequencies) {
                        oprot.writeI32(_iter8);
                    }
                }
            }
            if (struct.isSetConverted_type()) {
                oprot.writeI32(struct.converted_type.getValue());
            }
            if (struct.isSetScale()) {
                oprot.writeI32(struct.scale);
            }
            if (struct.isSetPrecision()) {
                oprot.writeI32(struct.precision);
            }
            if (struct.isSetField_id()) {
                oprot.writeI32(struct.field_id);
            }
            if (struct.isSetEnum_values()) {
                {
                    oprot.writeI32(struct.enum_values.size());
                    for (String _iter9 : struct.enum_values) {
                        oprot.writeString(_iter9);
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, TimeSeries struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.measurement_uid = iprot.readString();
            struct.setMeasurement_uidIsSet(true);
            struct.type = DataType.findByValue(iprot.readI32());
            struct.setTypeIsSet(true);
            struct.delta_object_type = iprot.readString();
            struct.setDelta_object_typeIsSet(true);
            BitSet incoming = iprot.readBitSet(8);
            if (incoming.get(0)) {
                struct.type_length = iprot.readI32();
                struct.setType_lengthIsSet(true);
            }
            if (incoming.get(1)) {
                struct.freq_type = FreqType.findByValue(iprot.readI32());
                struct.setFreq_typeIsSet(true);
            }
            if (incoming.get(2)) {
                {
                    org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                    struct.frequencies = new ArrayList<Integer>(_list10.size);
                    int _elem11;
                    for (int _i12 = 0; _i12 < _list10.size; ++_i12) {
                        _elem11 = iprot.readI32();
                        struct.frequencies.add(_elem11);
                    }
                }
                struct.setFrequenciesIsSet(true);
            }
            if (incoming.get(3)) {
                struct.converted_type = ConvertedType.findByValue(iprot.readI32());
                struct.setConverted_typeIsSet(true);
            }
            if (incoming.get(4)) {
                struct.scale = iprot.readI32();
                struct.setScaleIsSet(true);
            }
            if (incoming.get(5)) {
                struct.precision = iprot.readI32();
                struct.setPrecisionIsSet(true);
            }
            if (incoming.get(6)) {
                struct.field_id = iprot.readI32();
                struct.setField_idIsSet(true);
            }
            if (incoming.get(7)) {
                {
                    org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.enum_values = new ArrayList<String>(_list13.size);
                    String _elem14;
                    for (int _i15 = 0; _i15 < _list13.size; ++_i15) {
                        _elem14 = iprot.readString();
                        struct.enum_values.add(_elem14);
                    }
                }
                struct.setEnum_valuesIsSet(true);
            }
        }
    }

}

